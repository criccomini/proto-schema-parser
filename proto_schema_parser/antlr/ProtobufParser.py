# Generated from antlr/ProtobufParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,65,843,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
        7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
        2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,3,0,196,8,
        0,1,0,3,0,199,8,0,1,0,5,0,202,8,0,10,0,12,0,205,9,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,218,8,1,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,4,1,4,1,5,4,5,230,8,5,11,5,12,5,231,1,6,1,6,1,7,1,7,1,
        7,1,7,1,8,1,8,1,9,1,9,3,9,244,8,9,1,9,1,9,1,9,1,10,1,10,1,11,3,11,
        252,8,11,1,11,1,11,1,12,1,12,1,12,5,12,259,8,12,10,12,12,12,262,
        9,12,1,13,1,13,1,13,3,13,267,8,13,1,13,3,13,270,8,13,1,14,1,14,1,
        14,3,14,275,8,14,1,14,3,14,278,8,14,1,15,1,15,1,15,3,15,283,8,15,
        1,15,3,15,286,8,15,1,16,1,16,1,16,3,16,291,8,16,1,16,3,16,294,8,
        16,1,17,1,17,1,17,3,17,299,8,17,1,17,3,17,302,8,17,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,316,8,18,1,19,
        1,19,3,19,320,8,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        3,20,331,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,3,21,345,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,3,22,359,8,22,1,23,1,23,1,23,1,24,1,24,1,24,
        1,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,374,8,25,10,25,12,25,377,
        9,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,3,27,
        390,8,27,1,27,1,27,5,27,394,8,27,10,27,12,27,397,9,27,1,28,1,28,
        3,28,401,8,28,1,29,1,29,1,29,1,29,1,29,3,29,408,8,29,1,30,3,30,411,
        8,30,1,30,1,30,1,31,1,31,1,31,1,32,3,32,419,8,32,1,32,1,32,1,33,
        1,33,1,33,1,33,1,34,1,34,3,34,429,8,34,5,34,431,8,34,10,34,12,34,
        434,9,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,443,8,35,1,36,1,
        36,1,36,1,36,1,36,3,36,450,8,36,1,37,1,37,3,37,454,8,37,1,38,1,38,
        1,39,1,39,1,39,1,39,1,40,1,40,1,40,3,40,465,8,40,1,41,1,41,3,41,
        469,8,41,1,42,1,42,1,42,1,42,1,42,3,42,476,8,42,1,43,1,43,1,43,1,
        43,5,43,482,8,43,10,43,12,43,485,9,43,3,43,487,8,43,1,43,1,43,1,
        44,1,44,3,44,493,8,44,1,45,1,45,1,45,1,45,5,45,499,8,45,10,45,12,
        45,502,9,45,3,45,504,8,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,512,
        8,46,10,46,12,46,515,9,46,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,533,8,48,1,49,1,49,
        1,49,1,49,1,49,1,49,3,49,541,8,49,1,49,1,49,3,49,545,8,49,1,50,1,
        50,1,50,1,50,1,50,1,50,3,50,553,8,50,1,50,1,50,1,51,1,51,1,52,1,
        52,1,53,1,53,1,54,1,54,1,54,1,54,1,54,3,54,568,8,54,1,54,1,54,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,56,1,56,1,57,3,57,582,8,57,1,
        57,1,57,1,57,1,57,1,57,3,57,589,8,57,1,57,1,57,5,57,593,8,57,10,
        57,12,57,596,9,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,604,8,58,10,
        58,12,58,607,9,58,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,3,60,617,
        8,60,1,61,1,61,1,61,1,61,1,61,3,61,624,8,61,1,61,1,61,1,62,1,62,
        1,62,1,62,1,62,3,62,633,8,62,1,62,1,62,5,62,637,8,62,10,62,12,62,
        640,9,62,1,62,1,62,1,63,1,63,1,63,3,63,647,8,63,1,63,1,63,1,64,1,
        64,1,64,5,64,654,8,64,10,64,12,64,657,9,64,1,65,1,65,1,65,3,65,662,
        8,65,1,66,1,66,1,67,1,67,3,67,668,8,67,1,68,1,68,1,68,3,68,673,8,
        68,1,68,1,68,1,69,1,69,1,69,5,69,680,8,69,10,69,12,69,683,9,69,1,
        70,1,70,1,70,1,70,5,70,689,8,70,10,70,12,70,692,9,70,1,70,1,70,1,
        71,1,71,1,72,1,72,1,72,1,72,1,72,3,72,703,8,72,1,73,1,73,1,73,1,
        73,3,73,709,8,73,1,73,1,73,1,74,1,74,1,75,3,75,716,8,75,1,75,1,75,
        1,76,1,76,1,76,3,76,723,8,76,1,76,1,76,1,77,1,77,1,77,5,77,730,8,
        77,10,77,12,77,733,9,77,1,78,1,78,1,78,3,78,738,8,78,1,79,1,79,1,
        80,1,80,3,80,744,8,80,1,81,1,81,1,81,1,81,5,81,750,8,81,10,81,12,
        81,753,9,81,1,81,1,81,1,82,1,82,1,83,1,83,3,83,761,8,83,1,84,1,84,
        1,84,1,84,1,84,1,84,3,84,769,8,84,1,84,1,84,3,84,773,8,84,1,85,1,
        85,1,85,1,85,5,85,779,8,85,10,85,12,85,782,9,85,1,85,1,85,1,86,1,
        86,1,87,1,87,1,87,1,87,3,87,792,8,87,1,88,1,88,1,88,1,88,1,88,1,
        88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,5,88,808,8,88,10,88,12,
        88,811,9,88,1,88,1,88,3,88,815,8,88,1,89,1,89,1,90,1,90,1,91,1,91,
        1,92,1,92,1,92,3,92,826,8,92,1,93,1,93,3,93,830,8,93,1,93,1,93,1,
        93,1,94,1,94,3,94,837,8,94,1,95,1,95,1,96,1,96,1,96,0,0,97,0,2,4,
        6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
        94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,
        128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,
        160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,
        192,0,9,1,0,2,3,1,0,7,8,1,0,56,57,2,0,11,11,46,46,1,0,50,51,1,0,
        12,14,2,0,15,16,20,29,7,0,5,9,11,11,15,29,32,32,34,35,40,41,43,44,
        6,0,10,10,12,14,30,31,33,33,36,39,42,42,893,0,195,1,0,0,0,2,217,
        1,0,0,0,4,219,1,0,0,0,6,221,1,0,0,0,8,226,1,0,0,0,10,229,1,0,0,0,
        12,233,1,0,0,0,14,235,1,0,0,0,16,239,1,0,0,0,18,241,1,0,0,0,20,248,
        1,0,0,0,22,251,1,0,0,0,24,255,1,0,0,0,26,269,1,0,0,0,28,277,1,0,
        0,0,30,285,1,0,0,0,32,293,1,0,0,0,34,301,1,0,0,0,36,315,1,0,0,0,
        38,319,1,0,0,0,40,330,1,0,0,0,42,344,1,0,0,0,44,358,1,0,0,0,46,360,
        1,0,0,0,48,363,1,0,0,0,50,369,1,0,0,0,52,380,1,0,0,0,54,389,1,0,
        0,0,56,400,1,0,0,0,58,407,1,0,0,0,60,410,1,0,0,0,62,414,1,0,0,0,
        64,418,1,0,0,0,66,422,1,0,0,0,68,432,1,0,0,0,70,442,1,0,0,0,72,449,
        1,0,0,0,74,453,1,0,0,0,76,455,1,0,0,0,78,457,1,0,0,0,80,464,1,0,
        0,0,82,468,1,0,0,0,84,475,1,0,0,0,86,477,1,0,0,0,88,492,1,0,0,0,
        90,494,1,0,0,0,92,507,1,0,0,0,94,518,1,0,0,0,96,532,1,0,0,0,98,544,
        1,0,0,0,100,546,1,0,0,0,102,556,1,0,0,0,104,558,1,0,0,0,106,560,
        1,0,0,0,108,562,1,0,0,0,110,571,1,0,0,0,112,578,1,0,0,0,114,581,
        1,0,0,0,116,599,1,0,0,0,118,610,1,0,0,0,120,616,1,0,0,0,122,618,
        1,0,0,0,124,627,1,0,0,0,126,643,1,0,0,0,128,650,1,0,0,0,130,658,
        1,0,0,0,132,663,1,0,0,0,134,667,1,0,0,0,136,669,1,0,0,0,138,676,
        1,0,0,0,140,684,1,0,0,0,142,695,1,0,0,0,144,702,1,0,0,0,146,704,
        1,0,0,0,148,712,1,0,0,0,150,715,1,0,0,0,152,719,1,0,0,0,154,726,
        1,0,0,0,156,734,1,0,0,0,158,739,1,0,0,0,160,743,1,0,0,0,162,745,
        1,0,0,0,164,756,1,0,0,0,166,760,1,0,0,0,168,772,1,0,0,0,170,774,
        1,0,0,0,172,785,1,0,0,0,174,791,1,0,0,0,176,814,1,0,0,0,178,816,
        1,0,0,0,180,818,1,0,0,0,182,820,1,0,0,0,184,825,1,0,0,0,186,827,
        1,0,0,0,188,836,1,0,0,0,190,838,1,0,0,0,192,840,1,0,0,0,194,196,
        5,4,0,0,195,194,1,0,0,0,195,196,1,0,0,0,196,198,1,0,0,0,197,199,
        3,6,3,0,198,197,1,0,0,0,198,199,1,0,0,0,199,203,1,0,0,0,200,202,
        3,2,1,0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,
        1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,207,5,0,0,1,207,1,1,
        0,0,0,208,218,3,18,9,0,209,218,3,14,7,0,210,218,3,48,24,0,211,218,
        3,92,46,0,212,218,3,140,70,0,213,218,3,162,81,0,214,218,3,170,85,
        0,215,218,3,12,6,0,216,218,3,4,2,0,217,208,1,0,0,0,217,209,1,0,0,
        0,217,210,1,0,0,0,217,211,1,0,0,0,217,212,1,0,0,0,217,213,1,0,0,
        0,217,214,1,0,0,0,217,215,1,0,0,0,217,216,1,0,0,0,218,3,1,0,0,0,
        219,220,7,0,0,0,220,5,1,0,0,0,221,222,5,5,0,0,222,223,5,55,0,0,223,
        224,3,8,4,0,224,225,5,50,0,0,225,7,1,0,0,0,226,227,3,10,5,0,227,
        9,1,0,0,0,228,230,5,49,0,0,229,228,1,0,0,0,230,231,1,0,0,0,231,229,
        1,0,0,0,231,232,1,0,0,0,232,11,1,0,0,0,233,234,5,50,0,0,234,13,1,
        0,0,0,235,236,5,9,0,0,236,237,3,16,8,0,237,238,5,50,0,0,238,15,1,
        0,0,0,239,240,3,24,12,0,240,17,1,0,0,0,241,243,5,6,0,0,242,244,7,
        1,0,0,243,242,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,3,
        20,10,0,246,247,5,50,0,0,247,19,1,0,0,0,248,249,3,10,5,0,249,21,
        1,0,0,0,250,252,5,52,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,253,
        1,0,0,0,253,254,3,24,12,0,254,23,1,0,0,0,255,260,3,188,94,0,256,
        257,5,52,0,0,257,259,3,188,94,0,258,256,1,0,0,0,259,262,1,0,0,0,
        260,258,1,0,0,0,260,261,1,0,0,0,261,25,1,0,0,0,262,260,1,0,0,0,263,
        266,3,36,18,0,264,265,5,52,0,0,265,267,3,24,12,0,266,264,1,0,0,0,
        266,267,1,0,0,0,267,270,1,0,0,0,268,270,3,46,23,0,269,263,1,0,0,
        0,269,268,1,0,0,0,270,27,1,0,0,0,271,274,3,38,19,0,272,273,5,52,
        0,0,273,275,3,24,12,0,274,272,1,0,0,0,274,275,1,0,0,0,275,278,1,
        0,0,0,276,278,3,46,23,0,277,271,1,0,0,0,277,276,1,0,0,0,278,29,1,
        0,0,0,279,282,3,40,20,0,280,281,5,52,0,0,281,283,3,24,12,0,282,280,
        1,0,0,0,282,283,1,0,0,0,283,286,1,0,0,0,284,286,3,46,23,0,285,279,
        1,0,0,0,285,284,1,0,0,0,286,31,1,0,0,0,287,290,3,42,21,0,288,289,
        5,52,0,0,289,291,3,24,12,0,290,288,1,0,0,0,290,291,1,0,0,0,291,294,
        1,0,0,0,292,294,3,46,23,0,293,287,1,0,0,0,293,292,1,0,0,0,294,33,
        1,0,0,0,295,298,3,44,22,0,296,297,5,52,0,0,297,299,3,24,12,0,298,
        296,1,0,0,0,298,299,1,0,0,0,299,302,1,0,0,0,300,302,3,46,23,0,301,
        295,1,0,0,0,301,300,1,0,0,0,302,35,1,0,0,0,303,316,3,190,95,0,304,
        316,5,38,0,0,305,316,5,37,0,0,306,316,5,31,0,0,307,316,5,36,0,0,
        308,316,5,33,0,0,309,316,5,39,0,0,310,316,5,10,0,0,311,316,5,13,
        0,0,312,316,5,14,0,0,313,316,5,12,0,0,314,316,5,42,0,0,315,303,1,
        0,0,0,315,304,1,0,0,0,315,305,1,0,0,0,315,306,1,0,0,0,315,307,1,
        0,0,0,315,308,1,0,0,0,315,309,1,0,0,0,315,310,1,0,0,0,315,311,1,
        0,0,0,315,312,1,0,0,0,315,313,1,0,0,0,315,314,1,0,0,0,316,37,1,0,
        0,0,317,320,3,190,95,0,318,320,5,42,0,0,319,317,1,0,0,0,319,318,
        1,0,0,0,320,39,1,0,0,0,321,331,3,190,95,0,322,331,5,38,0,0,323,331,
        5,37,0,0,324,331,5,31,0,0,325,331,5,36,0,0,326,331,5,33,0,0,327,
        331,5,39,0,0,328,331,5,10,0,0,329,331,5,42,0,0,330,321,1,0,0,0,330,
        322,1,0,0,0,330,323,1,0,0,0,330,324,1,0,0,0,330,325,1,0,0,0,330,
        326,1,0,0,0,330,327,1,0,0,0,330,328,1,0,0,0,330,329,1,0,0,0,331,
        41,1,0,0,0,332,345,3,190,95,0,333,345,5,38,0,0,334,345,5,37,0,0,
        335,345,5,31,0,0,336,345,5,36,0,0,337,345,5,33,0,0,338,345,5,39,
        0,0,339,345,5,10,0,0,340,345,5,13,0,0,341,345,5,14,0,0,342,345,5,
        12,0,0,343,345,5,30,0,0,344,332,1,0,0,0,344,333,1,0,0,0,344,334,
        1,0,0,0,344,335,1,0,0,0,344,336,1,0,0,0,344,337,1,0,0,0,344,338,
        1,0,0,0,344,339,1,0,0,0,344,340,1,0,0,0,344,341,1,0,0,0,344,342,
        1,0,0,0,344,343,1,0,0,0,345,43,1,0,0,0,346,359,3,190,95,0,347,359,
        5,38,0,0,348,359,5,37,0,0,349,359,5,31,0,0,350,359,5,36,0,0,351,
        359,5,33,0,0,352,359,5,39,0,0,353,359,5,10,0,0,354,359,5,13,0,0,
        355,359,5,14,0,0,356,359,5,12,0,0,357,359,5,30,0,0,358,346,1,0,0,
        0,358,347,1,0,0,0,358,348,1,0,0,0,358,349,1,0,0,0,358,350,1,0,0,
        0,358,351,1,0,0,0,358,352,1,0,0,0,358,353,1,0,0,0,358,354,1,0,0,
        0,358,355,1,0,0,0,358,356,1,0,0,0,358,357,1,0,0,0,359,45,1,0,0,0,
        360,361,5,52,0,0,361,362,3,24,12,0,362,47,1,0,0,0,363,364,5,10,0,
        0,364,365,3,54,27,0,365,366,5,55,0,0,366,367,3,56,28,0,367,368,5,
        50,0,0,368,49,1,0,0,0,369,370,5,62,0,0,370,375,3,52,26,0,371,372,
        5,51,0,0,372,374,3,52,26,0,373,371,1,0,0,0,374,377,1,0,0,0,375,373,
        1,0,0,0,375,376,1,0,0,0,376,378,1,0,0,0,377,375,1,0,0,0,378,379,
        5,63,0,0,379,51,1,0,0,0,380,381,3,54,27,0,381,382,5,55,0,0,382,383,
        3,56,28,0,383,53,1,0,0,0,384,390,3,188,94,0,385,386,5,58,0,0,386,
        387,3,22,11,0,387,388,5,59,0,0,388,390,1,0,0,0,389,384,1,0,0,0,389,
        385,1,0,0,0,390,395,1,0,0,0,391,392,5,52,0,0,392,394,3,54,27,0,393,
        391,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,
        55,1,0,0,0,397,395,1,0,0,0,398,401,3,58,29,0,399,401,3,66,33,0,400,
        398,1,0,0,0,400,399,1,0,0,0,401,57,1,0,0,0,402,408,3,10,5,0,403,
        408,3,60,30,0,404,408,3,62,31,0,405,408,3,64,32,0,406,408,3,188,
        94,0,407,402,1,0,0,0,407,403,1,0,0,0,407,404,1,0,0,0,407,405,1,0,
        0,0,407,406,1,0,0,0,408,59,1,0,0,0,409,411,5,57,0,0,410,409,1,0,
        0,0,410,411,1,0,0,0,411,412,1,0,0,0,412,413,5,45,0,0,413,61,1,0,
        0,0,414,415,5,56,0,0,415,416,5,45,0,0,416,63,1,0,0,0,417,419,7,2,
        0,0,418,417,1,0,0,0,418,419,1,0,0,0,419,420,1,0,0,0,420,421,7,3,
        0,0,421,65,1,0,0,0,422,423,5,60,0,0,423,424,3,68,34,0,424,425,5,
        61,0,0,425,67,1,0,0,0,426,428,3,70,35,0,427,429,7,4,0,0,428,427,
        1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,426,1,0,0,0,431,434,
        1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,69,1,0,0,0,434,432,1,
        0,0,0,435,436,3,72,36,0,436,437,5,54,0,0,437,438,3,80,40,0,438,443,
        1,0,0,0,439,440,3,72,36,0,440,441,3,82,41,0,441,443,1,0,0,0,442,
        435,1,0,0,0,442,439,1,0,0,0,443,71,1,0,0,0,444,450,3,104,52,0,445,
        446,5,62,0,0,446,447,3,74,37,0,447,448,5,63,0,0,448,450,1,0,0,0,
        449,444,1,0,0,0,449,445,1,0,0,0,450,73,1,0,0,0,451,454,3,76,38,0,
        452,454,3,78,39,0,453,451,1,0,0,0,453,452,1,0,0,0,454,75,1,0,0,0,
        455,456,3,24,12,0,456,77,1,0,0,0,457,458,3,24,12,0,458,459,5,53,
        0,0,459,460,3,24,12,0,460,79,1,0,0,0,461,465,3,58,29,0,462,465,3,
        84,42,0,463,465,3,86,43,0,464,461,1,0,0,0,464,462,1,0,0,0,464,463,
        1,0,0,0,465,81,1,0,0,0,466,469,3,84,42,0,467,469,3,90,45,0,468,466,
        1,0,0,0,468,467,1,0,0,0,469,83,1,0,0,0,470,476,3,66,33,0,471,472,
        5,64,0,0,472,473,3,68,34,0,473,474,5,65,0,0,474,476,1,0,0,0,475,
        470,1,0,0,0,475,471,1,0,0,0,476,85,1,0,0,0,477,486,5,62,0,0,478,
        483,3,88,44,0,479,480,5,51,0,0,480,482,3,88,44,0,481,479,1,0,0,0,
        482,485,1,0,0,0,483,481,1,0,0,0,483,484,1,0,0,0,484,487,1,0,0,0,
        485,483,1,0,0,0,486,478,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,
        488,489,5,63,0,0,489,87,1,0,0,0,490,493,3,58,29,0,491,493,3,84,42,
        0,492,490,1,0,0,0,492,491,1,0,0,0,493,89,1,0,0,0,494,503,5,62,0,
        0,495,500,3,84,42,0,496,497,5,51,0,0,497,499,3,84,42,0,498,496,1,
        0,0,0,499,502,1,0,0,0,500,498,1,0,0,0,500,501,1,0,0,0,501,504,1,
        0,0,0,502,500,1,0,0,0,503,495,1,0,0,0,503,504,1,0,0,0,504,505,1,
        0,0,0,505,506,5,63,0,0,506,91,1,0,0,0,507,508,5,38,0,0,508,509,3,
        94,47,0,509,513,5,60,0,0,510,512,3,96,48,0,511,510,1,0,0,0,512,515,
        1,0,0,0,513,511,1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,
        1,0,0,0,516,517,5,61,0,0,517,93,1,0,0,0,518,519,3,188,94,0,519,95,
        1,0,0,0,520,533,3,98,49,0,521,533,3,114,57,0,522,533,3,116,58,0,
        523,533,3,48,24,0,524,533,3,126,63,0,525,533,3,136,68,0,526,533,
        3,92,46,0,527,533,3,140,70,0,528,533,3,162,81,0,529,533,3,108,54,
        0,530,533,3,12,6,0,531,533,3,4,2,0,532,520,1,0,0,0,532,521,1,0,0,
        0,532,522,1,0,0,0,532,523,1,0,0,0,532,524,1,0,0,0,532,525,1,0,0,
        0,532,526,1,0,0,0,532,527,1,0,0,0,532,528,1,0,0,0,532,529,1,0,0,
        0,532,530,1,0,0,0,532,531,1,0,0,0,533,97,1,0,0,0,534,545,3,100,50,
        0,535,536,3,28,14,0,536,537,3,104,52,0,537,538,5,55,0,0,538,540,
        3,106,53,0,539,541,3,50,25,0,540,539,1,0,0,0,540,541,1,0,0,0,541,
        542,1,0,0,0,542,543,5,50,0,0,543,545,1,0,0,0,544,534,1,0,0,0,544,
        535,1,0,0,0,545,99,1,0,0,0,546,547,3,102,51,0,547,548,3,26,13,0,
        548,549,3,104,52,0,549,550,5,55,0,0,550,552,3,106,53,0,551,553,3,
        50,25,0,552,551,1,0,0,0,552,553,1,0,0,0,553,554,1,0,0,0,554,555,
        5,50,0,0,555,101,1,0,0,0,556,557,7,5,0,0,557,103,1,0,0,0,558,559,
        3,188,94,0,559,105,1,0,0,0,560,561,5,45,0,0,561,107,1,0,0,0,562,
        563,3,110,55,0,563,564,3,104,52,0,564,565,5,55,0,0,565,567,3,106,
        53,0,566,568,3,50,25,0,567,566,1,0,0,0,567,568,1,0,0,0,568,569,1,
        0,0,0,569,570,5,50,0,0,570,109,1,0,0,0,571,572,5,32,0,0,572,573,
        5,64,0,0,573,574,3,112,56,0,574,575,5,51,0,0,575,576,3,22,11,0,576,
        577,5,65,0,0,577,111,1,0,0,0,578,579,7,6,0,0,579,113,1,0,0,0,580,
        582,3,102,51,0,581,580,1,0,0,0,581,582,1,0,0,0,582,583,1,0,0,0,583,
        584,5,30,0,0,584,585,3,104,52,0,585,586,5,55,0,0,586,588,3,106,53,
        0,587,589,3,50,25,0,588,587,1,0,0,0,588,589,1,0,0,0,589,590,1,0,
        0,0,590,594,5,60,0,0,591,593,3,96,48,0,592,591,1,0,0,0,593,596,1,
        0,0,0,594,592,1,0,0,0,594,595,1,0,0,0,595,597,1,0,0,0,596,594,1,
        0,0,0,597,598,5,61,0,0,598,115,1,0,0,0,599,600,5,31,0,0,600,601,
        3,118,59,0,601,605,5,60,0,0,602,604,3,120,60,0,603,602,1,0,0,0,604,
        607,1,0,0,0,605,603,1,0,0,0,605,606,1,0,0,0,606,608,1,0,0,0,607,
        605,1,0,0,0,608,609,5,61,0,0,609,117,1,0,0,0,610,611,3,188,94,0,
        611,119,1,0,0,0,612,617,3,48,24,0,613,617,3,122,61,0,614,617,3,124,
        62,0,615,617,3,4,2,0,616,612,1,0,0,0,616,613,1,0,0,0,616,614,1,0,
        0,0,616,615,1,0,0,0,617,121,1,0,0,0,618,619,3,32,16,0,619,620,3,
        104,52,0,620,621,5,55,0,0,621,623,3,106,53,0,622,624,3,50,25,0,623,
        622,1,0,0,0,623,624,1,0,0,0,624,625,1,0,0,0,625,626,5,50,0,0,626,
        123,1,0,0,0,627,628,5,30,0,0,628,629,3,104,52,0,629,630,5,55,0,0,
        630,632,3,106,53,0,631,633,3,50,25,0,632,631,1,0,0,0,632,633,1,0,
        0,0,633,634,1,0,0,0,634,638,5,60,0,0,635,637,3,96,48,0,636,635,1,
        0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,638,639,1,0,0,0,639,641,1,
        0,0,0,640,638,1,0,0,0,641,642,5,61,0,0,642,125,1,0,0,0,643,644,5,
        33,0,0,644,646,3,128,64,0,645,647,3,50,25,0,646,645,1,0,0,0,646,
        647,1,0,0,0,647,648,1,0,0,0,648,649,5,50,0,0,649,127,1,0,0,0,650,
        655,3,130,65,0,651,652,5,51,0,0,652,654,3,130,65,0,653,651,1,0,0,
        0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,656,129,1,0,0,
        0,657,655,1,0,0,0,658,661,3,132,66,0,659,660,5,34,0,0,660,662,3,
        134,67,0,661,659,1,0,0,0,661,662,1,0,0,0,662,131,1,0,0,0,663,664,
        3,106,53,0,664,133,1,0,0,0,665,668,3,106,53,0,666,668,5,35,0,0,667,
        665,1,0,0,0,667,666,1,0,0,0,668,135,1,0,0,0,669,672,5,36,0,0,670,
        673,3,128,64,0,671,673,3,138,69,0,672,670,1,0,0,0,672,671,1,0,0,
        0,673,674,1,0,0,0,674,675,5,50,0,0,675,137,1,0,0,0,676,681,3,10,
        5,0,677,678,5,51,0,0,678,680,3,10,5,0,679,677,1,0,0,0,680,683,1,
        0,0,0,681,679,1,0,0,0,681,682,1,0,0,0,682,139,1,0,0,0,683,681,1,
        0,0,0,684,685,5,37,0,0,685,686,3,142,71,0,686,690,5,60,0,0,687,689,
        3,144,72,0,688,687,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,
        1,0,0,0,691,693,1,0,0,0,692,690,1,0,0,0,693,694,5,61,0,0,694,141,
        1,0,0,0,695,696,3,188,94,0,696,143,1,0,0,0,697,703,3,48,24,0,698,
        703,3,146,73,0,699,703,3,152,76,0,700,703,3,12,6,0,701,703,3,4,2,
        0,702,697,1,0,0,0,702,698,1,0,0,0,702,699,1,0,0,0,702,700,1,0,0,
        0,702,701,1,0,0,0,703,145,1,0,0,0,704,705,3,148,74,0,705,706,5,55,
        0,0,706,708,3,150,75,0,707,709,3,50,25,0,708,707,1,0,0,0,708,709,
        1,0,0,0,709,710,1,0,0,0,710,711,5,50,0,0,711,147,1,0,0,0,712,713,
        3,188,94,0,713,149,1,0,0,0,714,716,5,56,0,0,715,714,1,0,0,0,715,
        716,1,0,0,0,716,717,1,0,0,0,717,718,5,45,0,0,718,151,1,0,0,0,719,
        722,5,36,0,0,720,723,3,154,77,0,721,723,3,138,69,0,722,720,1,0,0,
        0,722,721,1,0,0,0,723,724,1,0,0,0,724,725,5,50,0,0,725,153,1,0,0,
        0,726,731,3,156,78,0,727,728,5,51,0,0,728,730,3,156,78,0,729,727,
        1,0,0,0,730,733,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,155,
        1,0,0,0,733,731,1,0,0,0,734,737,3,158,79,0,735,736,5,34,0,0,736,
        738,3,160,80,0,737,735,1,0,0,0,737,738,1,0,0,0,738,157,1,0,0,0,739,
        740,3,150,75,0,740,159,1,0,0,0,741,744,3,150,75,0,742,744,5,35,0,
        0,743,741,1,0,0,0,743,742,1,0,0,0,744,161,1,0,0,0,745,746,5,39,0,
        0,746,747,3,164,82,0,747,751,5,60,0,0,748,750,3,166,83,0,749,748,
        1,0,0,0,750,753,1,0,0,0,751,749,1,0,0,0,751,752,1,0,0,0,752,754,
        1,0,0,0,753,751,1,0,0,0,754,755,5,61,0,0,755,163,1,0,0,0,756,757,
        3,22,11,0,757,165,1,0,0,0,758,761,3,168,84,0,759,761,3,114,57,0,
        760,758,1,0,0,0,760,759,1,0,0,0,761,167,1,0,0,0,762,773,3,100,50,
        0,763,764,3,30,15,0,764,765,3,104,52,0,765,766,5,55,0,0,766,768,
        3,106,53,0,767,769,3,50,25,0,768,767,1,0,0,0,768,769,1,0,0,0,769,
        770,1,0,0,0,770,771,5,50,0,0,771,773,1,0,0,0,772,762,1,0,0,0,772,
        763,1,0,0,0,773,169,1,0,0,0,774,775,5,40,0,0,775,776,3,172,86,0,
        776,780,5,60,0,0,777,779,3,174,87,0,778,777,1,0,0,0,779,782,1,0,
        0,0,780,778,1,0,0,0,780,781,1,0,0,0,781,783,1,0,0,0,782,780,1,0,
        0,0,783,784,5,61,0,0,784,171,1,0,0,0,785,786,3,188,94,0,786,173,
        1,0,0,0,787,792,3,48,24,0,788,792,3,4,2,0,789,792,3,176,88,0,790,
        792,3,12,6,0,791,787,1,0,0,0,791,788,1,0,0,0,791,789,1,0,0,0,791,
        790,1,0,0,0,792,175,1,0,0,0,793,794,5,41,0,0,794,795,3,178,89,0,
        795,796,3,180,90,0,796,797,5,43,0,0,797,798,3,182,91,0,798,799,5,
        50,0,0,799,815,1,0,0,0,800,801,5,41,0,0,801,802,3,178,89,0,802,803,
        3,180,90,0,803,804,5,43,0,0,804,805,3,182,91,0,805,809,5,60,0,0,
        806,808,3,184,92,0,807,806,1,0,0,0,808,811,1,0,0,0,809,807,1,0,0,
        0,809,810,1,0,0,0,810,812,1,0,0,0,811,809,1,0,0,0,812,813,5,61,0,
        0,813,815,1,0,0,0,814,793,1,0,0,0,814,800,1,0,0,0,815,177,1,0,0,
        0,816,817,3,188,94,0,817,179,1,0,0,0,818,819,3,186,93,0,819,181,
        1,0,0,0,820,821,3,186,93,0,821,183,1,0,0,0,822,826,3,48,24,0,823,
        826,3,4,2,0,824,826,3,12,6,0,825,822,1,0,0,0,825,823,1,0,0,0,825,
        824,1,0,0,0,826,185,1,0,0,0,827,829,5,58,0,0,828,830,5,42,0,0,829,
        828,1,0,0,0,829,830,1,0,0,0,830,831,1,0,0,0,831,832,3,34,17,0,832,
        833,5,59,0,0,833,187,1,0,0,0,834,837,3,190,95,0,835,837,3,192,96,
        0,836,834,1,0,0,0,836,835,1,0,0,0,837,189,1,0,0,0,838,839,7,7,0,
        0,839,191,1,0,0,0,840,841,7,8,0,0,841,193,1,0,0,0,82,195,198,203,
        217,231,243,251,260,266,269,274,277,282,285,290,293,298,301,315,
        319,330,344,358,375,389,395,400,407,410,418,428,432,442,449,453,
        464,468,475,483,486,492,500,503,513,532,540,544,552,567,581,588,
        594,605,616,623,632,638,646,655,661,667,672,681,690,702,708,715,
        722,731,737,743,751,760,768,772,780,791,809,814,825,829,836
    ]

class ProtobufParser ( Parser ):

    grammarFileName = "ProtobufParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'\\uFEFF'", "'syntax'", "'import'", "'weak'", "'public'", 
                     "'package'", "'option'", "'inf'", "'repeated'", "'optional'", 
                     "'required'", "'bool'", "'string'", "'bytes'", "'float'", 
                     "'double'", "'int32'", "'int64'", "'uint32'", "'uint64'", 
                     "'sint32'", "'sint64'", "'fixed32'", "'fixed64'", "'sfixed32'", 
                     "'sfixed64'", "'group'", "'oneof'", "'map'", "'extensions'", 
                     "'to'", "'max'", "'reserved'", "'enum'", "'message'", 
                     "'extend'", "'service'", "'rpc'", "'stream'", "'returns'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "';'", "','", "'.'", "'/'", 
                     "':'", "'='", "'-'", "'+'", "'('", "')'", "'{'", "'}'", 
                     "'['", "']'", "'<'", "'>'" ]

    symbolicNames = [ "<INVALID>", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
                      "BYTE_ORDER_MARK", "SYNTAX", "IMPORT", "WEAK", "PUBLIC", 
                      "PACKAGE", "OPTION", "INF", "REPEATED", "OPTIONAL", 
                      "REQUIRED", "BOOL", "STRING", "BYTES", "FLOAT", "DOUBLE", 
                      "INT32", "INT64", "UINT32", "UINT64", "SINT32", "SINT64", 
                      "FIXED32", "FIXED64", "SFIXED32", "SFIXED64", "GROUP", 
                      "ONEOF", "MAP", "EXTENSIONS", "TO", "MAX", "RESERVED", 
                      "ENUM", "MESSAGE", "EXTEND", "SERVICE", "RPC", "STREAM", 
                      "RETURNS", "IDENTIFIER", "INT_LITERAL", "FLOAT_LITERAL", 
                      "INVALID_INT_LITERAL", "INVALID_FLOAT_LITERAL", "STRING_LITERAL", 
                      "SEMICOLON", "COMMA", "DOT", "SLASH", "COLON", "EQUALS", 
                      "MINUS", "PLUS", "L_PAREN", "R_PAREN", "L_BRACE", 
                      "R_BRACE", "L_BRACKET", "R_BRACKET", "L_ANGLE", "R_ANGLE" ]

    RULE_file = 0
    RULE_fileElement = 1
    RULE_commentDecl = 2
    RULE_syntaxDecl = 3
    RULE_syntaxLevel = 4
    RULE_stringLiteral = 5
    RULE_emptyDecl = 6
    RULE_packageDecl = 7
    RULE_packageName = 8
    RULE_importDecl = 9
    RULE_importedFileName = 10
    RULE_typeName = 11
    RULE_qualifiedIdentifier = 12
    RULE_fieldDeclTypeName = 13
    RULE_messageFieldDeclTypeName = 14
    RULE_extensionFieldDeclTypeName = 15
    RULE_oneofFieldDeclTypeName = 16
    RULE_methodDeclTypeName = 17
    RULE_fieldDeclIdentifier = 18
    RULE_messageFieldDeclIdentifier = 19
    RULE_extensionFieldDeclIdentifier = 20
    RULE_oneofFieldDeclIdentifier = 21
    RULE_methodDeclIdentifier = 22
    RULE_fullyQualifiedIdentifier = 23
    RULE_optionDecl = 24
    RULE_compactOptions = 25
    RULE_compactOption = 26
    RULE_optionName = 27
    RULE_optionValue = 28
    RULE_scalarValue = 29
    RULE_uintLiteral = 30
    RULE_intLiteral = 31
    RULE_floatLiteral = 32
    RULE_messageLiteralWithBraces = 33
    RULE_messageTextFormat = 34
    RULE_messageLiteralField = 35
    RULE_messageLiteralFieldName = 36
    RULE_specialFieldName = 37
    RULE_extensionFieldName = 38
    RULE_typeURL = 39
    RULE_value = 40
    RULE_messageValue = 41
    RULE_messageLiteral = 42
    RULE_listLiteral = 43
    RULE_listElement = 44
    RULE_listOfMessagesLiteral = 45
    RULE_messageDecl = 46
    RULE_messageName = 47
    RULE_messageElement = 48
    RULE_messageFieldDecl = 49
    RULE_fieldDeclWithCardinality = 50
    RULE_fieldCardinality = 51
    RULE_fieldName = 52
    RULE_fieldNumber = 53
    RULE_mapFieldDecl = 54
    RULE_mapType = 55
    RULE_mapKeyType = 56
    RULE_groupDecl = 57
    RULE_oneofDecl = 58
    RULE_oneofName = 59
    RULE_oneofElement = 60
    RULE_oneofFieldDecl = 61
    RULE_oneofGroupDecl = 62
    RULE_extensionRangeDecl = 63
    RULE_tagRanges = 64
    RULE_tagRange = 65
    RULE_tagRangeStart = 66
    RULE_tagRangeEnd = 67
    RULE_messageReservedDecl = 68
    RULE_names = 69
    RULE_enumDecl = 70
    RULE_enumName = 71
    RULE_enumElement = 72
    RULE_enumValueDecl = 73
    RULE_enumValueName = 74
    RULE_enumValueNumber = 75
    RULE_enumReservedDecl = 76
    RULE_enumValueRanges = 77
    RULE_enumValueRange = 78
    RULE_enumValueRangeStart = 79
    RULE_enumValueRangeEnd = 80
    RULE_extensionDecl = 81
    RULE_extendedMessage = 82
    RULE_extensionElement = 83
    RULE_extensionFieldDecl = 84
    RULE_serviceDecl = 85
    RULE_serviceName = 86
    RULE_serviceElement = 87
    RULE_methodDecl = 88
    RULE_methodName = 89
    RULE_inputType = 90
    RULE_outputType = 91
    RULE_methodElement = 92
    RULE_messageType = 93
    RULE_identifier = 94
    RULE_alwaysIdent = 95
    RULE_sometimesIdent = 96

    ruleNames =  [ "file", "fileElement", "commentDecl", "syntaxDecl", "syntaxLevel", 
                   "stringLiteral", "emptyDecl", "packageDecl", "packageName", 
                   "importDecl", "importedFileName", "typeName", "qualifiedIdentifier", 
                   "fieldDeclTypeName", "messageFieldDeclTypeName", "extensionFieldDeclTypeName", 
                   "oneofFieldDeclTypeName", "methodDeclTypeName", "fieldDeclIdentifier", 
                   "messageFieldDeclIdentifier", "extensionFieldDeclIdentifier", 
                   "oneofFieldDeclIdentifier", "methodDeclIdentifier", "fullyQualifiedIdentifier", 
                   "optionDecl", "compactOptions", "compactOption", "optionName", 
                   "optionValue", "scalarValue", "uintLiteral", "intLiteral", 
                   "floatLiteral", "messageLiteralWithBraces", "messageTextFormat", 
                   "messageLiteralField", "messageLiteralFieldName", "specialFieldName", 
                   "extensionFieldName", "typeURL", "value", "messageValue", 
                   "messageLiteral", "listLiteral", "listElement", "listOfMessagesLiteral", 
                   "messageDecl", "messageName", "messageElement", "messageFieldDecl", 
                   "fieldDeclWithCardinality", "fieldCardinality", "fieldName", 
                   "fieldNumber", "mapFieldDecl", "mapType", "mapKeyType", 
                   "groupDecl", "oneofDecl", "oneofName", "oneofElement", 
                   "oneofFieldDecl", "oneofGroupDecl", "extensionRangeDecl", 
                   "tagRanges", "tagRange", "tagRangeStart", "tagRangeEnd", 
                   "messageReservedDecl", "names", "enumDecl", "enumName", 
                   "enumElement", "enumValueDecl", "enumValueName", "enumValueNumber", 
                   "enumReservedDecl", "enumValueRanges", "enumValueRange", 
                   "enumValueRangeStart", "enumValueRangeEnd", "extensionDecl", 
                   "extendedMessage", "extensionElement", "extensionFieldDecl", 
                   "serviceDecl", "serviceName", "serviceElement", "methodDecl", 
                   "methodName", "inputType", "outputType", "methodElement", 
                   "messageType", "identifier", "alwaysIdent", "sometimesIdent" ]

    EOF = Token.EOF
    WS=1
    LINE_COMMENT=2
    BLOCK_COMMENT=3
    BYTE_ORDER_MARK=4
    SYNTAX=5
    IMPORT=6
    WEAK=7
    PUBLIC=8
    PACKAGE=9
    OPTION=10
    INF=11
    REPEATED=12
    OPTIONAL=13
    REQUIRED=14
    BOOL=15
    STRING=16
    BYTES=17
    FLOAT=18
    DOUBLE=19
    INT32=20
    INT64=21
    UINT32=22
    UINT64=23
    SINT32=24
    SINT64=25
    FIXED32=26
    FIXED64=27
    SFIXED32=28
    SFIXED64=29
    GROUP=30
    ONEOF=31
    MAP=32
    EXTENSIONS=33
    TO=34
    MAX=35
    RESERVED=36
    ENUM=37
    MESSAGE=38
    EXTEND=39
    SERVICE=40
    RPC=41
    STREAM=42
    RETURNS=43
    IDENTIFIER=44
    INT_LITERAL=45
    FLOAT_LITERAL=46
    INVALID_INT_LITERAL=47
    INVALID_FLOAT_LITERAL=48
    STRING_LITERAL=49
    SEMICOLON=50
    COMMA=51
    DOT=52
    SLASH=53
    COLON=54
    EQUALS=55
    MINUS=56
    PLUS=57
    L_PAREN=58
    R_PAREN=59
    L_BRACE=60
    R_BRACE=61
    L_BRACKET=62
    R_BRACKET=63
    L_ANGLE=64
    R_ANGLE=65

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ProtobufParser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(ProtobufParser.BYTE_ORDER_MARK, 0)

        def syntaxDecl(self):
            return self.getTypedRuleContext(ProtobufParser.SyntaxDeclContext,0)


        def fileElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.FileElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.FileElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile" ):
                listener.enterFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile" ):
                listener.exitFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile" ):
                return visitor.visitFile(self)
            else:
                return visitor.visitChildren(self)




    def file_(self):

        localctx = ProtobufParser.FileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 194
                self.match(ProtobufParser.BYTE_ORDER_MARK)


            self.state = 198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 197
                self.syntaxDecl()


            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1127961491146316) != 0):
                self.state = 200
                self.fileElement()
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 206
            self.match(ProtobufParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ImportDeclContext,0)


        def packageDecl(self):
            return self.getTypedRuleContext(ProtobufParser.PackageDeclContext,0)


        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def messageDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MessageDeclContext,0)


        def enumDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EnumDeclContext,0)


        def extensionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionDeclContext,0)


        def serviceDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ServiceDeclContext,0)


        def emptyDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EmptyDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_fileElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileElement" ):
                listener.enterFileElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileElement" ):
                listener.exitFileElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileElement" ):
                return visitor.visitFileElement(self)
            else:
                return visitor.visitChildren(self)




    def fileElement(self):

        localctx = ProtobufParser.FileElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fileElement)
        try:
            self.state = 217
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 208
                self.importDecl()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 209
                self.packageDecl()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 210
                self.optionDecl()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 4)
                self.state = 211
                self.messageDecl()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 5)
                self.state = 212
                self.enumDecl()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 6)
                self.state = 213
                self.extensionDecl()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 7)
                self.state = 214
                self.serviceDecl()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 8)
                self.state = 215
                self.emptyDecl()
                pass
            elif token in [2, 3]:
                self.enterOuterAlt(localctx, 9)
                self.state = 216
                self.commentDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_COMMENT(self):
            return self.getToken(ProtobufParser.LINE_COMMENT, 0)

        def BLOCK_COMMENT(self):
            return self.getToken(ProtobufParser.BLOCK_COMMENT, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_commentDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentDecl" ):
                listener.enterCommentDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentDecl" ):
                listener.exitCommentDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentDecl" ):
                return visitor.visitCommentDecl(self)
            else:
                return visitor.visitChildren(self)




    def commentDecl(self):

        localctx = ProtobufParser.CommentDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_commentDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            _la = self._input.LA(1)
            if not(_la==2 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyntaxDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNTAX(self):
            return self.getToken(ProtobufParser.SYNTAX, 0)

        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def syntaxLevel(self):
            return self.getTypedRuleContext(ProtobufParser.SyntaxLevelContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_syntaxDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyntaxDecl" ):
                listener.enterSyntaxDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyntaxDecl" ):
                listener.exitSyntaxDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSyntaxDecl" ):
                return visitor.visitSyntaxDecl(self)
            else:
                return visitor.visitChildren(self)




    def syntaxDecl(self):

        localctx = ProtobufParser.SyntaxDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_syntaxDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 221
            self.match(ProtobufParser.SYNTAX)
            self.state = 222
            self.match(ProtobufParser.EQUALS)
            self.state = 223
            self.syntaxLevel()
            self.state = 224
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyntaxLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_syntaxLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyntaxLevel" ):
                listener.enterSyntaxLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyntaxLevel" ):
                listener.exitSyntaxLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSyntaxLevel" ):
                return visitor.visitSyntaxLevel(self)
            else:
                return visitor.visitChildren(self)




    def syntaxLevel(self):

        localctx = ProtobufParser.SyntaxLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_syntaxLevel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.STRING_LITERAL)
            else:
                return self.getToken(ProtobufParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = ProtobufParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 228
                self.match(ProtobufParser.STRING_LITERAL)
                self.state = 231 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==49):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_emptyDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyDecl" ):
                listener.enterEmptyDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyDecl" ):
                listener.exitEmptyDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyDecl" ):
                return visitor.visitEmptyDecl(self)
            else:
                return visitor.visitChildren(self)




    def emptyDecl(self):

        localctx = ProtobufParser.EmptyDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_emptyDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(ProtobufParser.PACKAGE, 0)

        def packageName(self):
            return self.getTypedRuleContext(ProtobufParser.PackageNameContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_packageDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDecl" ):
                listener.enterPackageDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDecl" ):
                listener.exitPackageDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageDecl" ):
                return visitor.visitPackageDecl(self)
            else:
                return visitor.visitChildren(self)




    def packageDecl(self):

        localctx = ProtobufParser.PackageDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_packageDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(ProtobufParser.PACKAGE)
            self.state = 236
            self.packageName()
            self.state = 237
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_packageName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageName" ):
                listener.enterPackageName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageName" ):
                listener.exitPackageName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageName" ):
                return visitor.visitPackageName(self)
            else:
                return visitor.visitChildren(self)




    def packageName(self):

        localctx = ProtobufParser.PackageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_packageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(ProtobufParser.IMPORT, 0)

        def importedFileName(self):
            return self.getTypedRuleContext(ProtobufParser.ImportedFileNameContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def WEAK(self):
            return self.getToken(ProtobufParser.WEAK, 0)

        def PUBLIC(self):
            return self.getToken(ProtobufParser.PUBLIC, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_importDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDecl" ):
                listener.enterImportDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDecl" ):
                listener.exitImportDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDecl" ):
                return visitor.visitImportDecl(self)
            else:
                return visitor.visitChildren(self)




    def importDecl(self):

        localctx = ProtobufParser.ImportDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(ProtobufParser.IMPORT)
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==8:
                self.state = 242
                _la = self._input.LA(1)
                if not(_la==7 or _la==8):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 245
            self.importedFileName()
            self.state = 246
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportedFileNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_importedFileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportedFileName" ):
                listener.enterImportedFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportedFileName" ):
                listener.exitImportedFileName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportedFileName" ):
                return visitor.visitImportedFileName(self)
            else:
                return visitor.visitChildren(self)




    def importedFileName(self):

        localctx = ProtobufParser.ImportedFileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_importedFileName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = ProtobufParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==52:
                self.state = 250
                self.match(ProtobufParser.DOT)


            self.state = 253
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.DOT)
            else:
                return self.getToken(ProtobufParser.DOT, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedIdentifier" ):
                return visitor.visitQualifiedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedIdentifier(self):

        localctx = ProtobufParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.identifier()
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==52:
                self.state = 256
                self.match(ProtobufParser.DOT)
                self.state = 257
                self.identifier()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FieldDeclIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def fullyQualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FullyQualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldDeclTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclTypeName" ):
                listener.enterFieldDeclTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclTypeName" ):
                listener.exitFieldDeclTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclTypeName" ):
                return visitor.visitFieldDeclTypeName(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclTypeName(self):

        localctx = ProtobufParser.FieldDeclTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_fieldDeclTypeName)
        self._la = 0 # Token type
        try:
            self.state = 269
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 263
                self.fieldDeclIdentifier()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 264
                    self.match(ProtobufParser.DOT)
                    self.state = 265
                    self.qualifiedIdentifier()


                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self.fullyQualifiedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageFieldDeclTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageFieldDeclIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.MessageFieldDeclIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def fullyQualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FullyQualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageFieldDeclTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageFieldDeclTypeName" ):
                listener.enterMessageFieldDeclTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageFieldDeclTypeName" ):
                listener.exitMessageFieldDeclTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageFieldDeclTypeName" ):
                return visitor.visitMessageFieldDeclTypeName(self)
            else:
                return visitor.visitChildren(self)




    def messageFieldDeclTypeName(self):

        localctx = ProtobufParser.MessageFieldDeclTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_messageFieldDeclTypeName)
        self._la = 0 # Token type
        try:
            self.state = 277
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 40, 41, 42, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 271
                self.messageFieldDeclIdentifier()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 272
                    self.match(ProtobufParser.DOT)
                    self.state = 273
                    self.qualifiedIdentifier()


                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 276
                self.fullyQualifiedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionFieldDeclTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extensionFieldDeclIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionFieldDeclIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def fullyQualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FullyQualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionFieldDeclTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionFieldDeclTypeName" ):
                listener.enterExtensionFieldDeclTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionFieldDeclTypeName" ):
                listener.exitExtensionFieldDeclTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionFieldDeclTypeName" ):
                return visitor.visitExtensionFieldDeclTypeName(self)
            else:
                return visitor.visitChildren(self)




    def extensionFieldDeclTypeName(self):

        localctx = ProtobufParser.ExtensionFieldDeclTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_extensionFieldDeclTypeName)
        self._la = 0 # Token type
        try:
            self.state = 285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 279
                self.extensionFieldDeclIdentifier()
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 280
                    self.match(ProtobufParser.DOT)
                    self.state = 281
                    self.qualifiedIdentifier()


                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 284
                self.fullyQualifiedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofFieldDeclTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oneofFieldDeclIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.OneofFieldDeclIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def fullyQualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FullyQualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofFieldDeclTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofFieldDeclTypeName" ):
                listener.enterOneofFieldDeclTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofFieldDeclTypeName" ):
                listener.exitOneofFieldDeclTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofFieldDeclTypeName" ):
                return visitor.visitOneofFieldDeclTypeName(self)
            else:
                return visitor.visitChildren(self)




    def oneofFieldDeclTypeName(self):

        localctx = ProtobufParser.OneofFieldDeclTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oneofFieldDeclTypeName)
        self._la = 0 # Token type
        try:
            self.state = 293
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 287
                self.oneofFieldDeclIdentifier()
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 288
                    self.match(ProtobufParser.DOT)
                    self.state = 289
                    self.qualifiedIdentifier()


                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 292
                self.fullyQualifiedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDeclIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.MethodDeclIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def fullyQualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FullyQualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_methodDeclTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclTypeName" ):
                listener.enterMethodDeclTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclTypeName" ):
                listener.exitMethodDeclTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclTypeName" ):
                return visitor.visitMethodDeclTypeName(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclTypeName(self):

        localctx = ProtobufParser.MethodDeclTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_methodDeclTypeName)
        self._la = 0 # Token type
        try:
            self.state = 301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 295
                self.methodDeclIdentifier()
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==52:
                    self.state = 296
                    self.match(ProtobufParser.DOT)
                    self.state = 297
                    self.qualifiedIdentifier()


                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 300
                self.fullyQualifiedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def OPTIONAL(self):
            return self.getToken(ProtobufParser.OPTIONAL, 0)

        def REQUIRED(self):
            return self.getToken(ProtobufParser.REQUIRED, 0)

        def REPEATED(self):
            return self.getToken(ProtobufParser.REPEATED, 0)

        def STREAM(self):
            return self.getToken(ProtobufParser.STREAM, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldDeclIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclIdentifier" ):
                listener.enterFieldDeclIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclIdentifier" ):
                listener.exitFieldDeclIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclIdentifier" ):
                return visitor.visitFieldDeclIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclIdentifier(self):

        localctx = ProtobufParser.FieldDeclIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fieldDeclIdentifier)
        try:
            self.state = 315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 40, 41, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                self.alwaysIdent()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 304
                self.match(ProtobufParser.MESSAGE)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 305
                self.match(ProtobufParser.ENUM)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 4)
                self.state = 306
                self.match(ProtobufParser.ONEOF)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 307
                self.match(ProtobufParser.RESERVED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 6)
                self.state = 308
                self.match(ProtobufParser.EXTENSIONS)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 7)
                self.state = 309
                self.match(ProtobufParser.EXTEND)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 8)
                self.state = 310
                self.match(ProtobufParser.OPTION)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 9)
                self.state = 311
                self.match(ProtobufParser.OPTIONAL)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 10)
                self.state = 312
                self.match(ProtobufParser.REQUIRED)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 11)
                self.state = 313
                self.match(ProtobufParser.REPEATED)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 12)
                self.state = 314
                self.match(ProtobufParser.STREAM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageFieldDeclIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def STREAM(self):
            return self.getToken(ProtobufParser.STREAM, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageFieldDeclIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageFieldDeclIdentifier" ):
                listener.enterMessageFieldDeclIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageFieldDeclIdentifier" ):
                listener.exitMessageFieldDeclIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageFieldDeclIdentifier" ):
                return visitor.visitMessageFieldDeclIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def messageFieldDeclIdentifier(self):

        localctx = ProtobufParser.MessageFieldDeclIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_messageFieldDeclIdentifier)
        try:
            self.state = 319
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 40, 41, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 317
                self.alwaysIdent()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 318
                self.match(ProtobufParser.STREAM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionFieldDeclIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def STREAM(self):
            return self.getToken(ProtobufParser.STREAM, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionFieldDeclIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionFieldDeclIdentifier" ):
                listener.enterExtensionFieldDeclIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionFieldDeclIdentifier" ):
                listener.exitExtensionFieldDeclIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionFieldDeclIdentifier" ):
                return visitor.visitExtensionFieldDeclIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def extensionFieldDeclIdentifier(self):

        localctx = ProtobufParser.ExtensionFieldDeclIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_extensionFieldDeclIdentifier)
        try:
            self.state = 330
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 40, 41, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 321
                self.alwaysIdent()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 322
                self.match(ProtobufParser.MESSAGE)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 323
                self.match(ProtobufParser.ENUM)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 4)
                self.state = 324
                self.match(ProtobufParser.ONEOF)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 325
                self.match(ProtobufParser.RESERVED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 6)
                self.state = 326
                self.match(ProtobufParser.EXTENSIONS)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 7)
                self.state = 327
                self.match(ProtobufParser.EXTEND)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 8)
                self.state = 328
                self.match(ProtobufParser.OPTION)
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 9)
                self.state = 329
                self.match(ProtobufParser.STREAM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofFieldDeclIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def OPTIONAL(self):
            return self.getToken(ProtobufParser.OPTIONAL, 0)

        def REQUIRED(self):
            return self.getToken(ProtobufParser.REQUIRED, 0)

        def REPEATED(self):
            return self.getToken(ProtobufParser.REPEATED, 0)

        def GROUP(self):
            return self.getToken(ProtobufParser.GROUP, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofFieldDeclIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofFieldDeclIdentifier" ):
                listener.enterOneofFieldDeclIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofFieldDeclIdentifier" ):
                listener.exitOneofFieldDeclIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofFieldDeclIdentifier" ):
                return visitor.visitOneofFieldDeclIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def oneofFieldDeclIdentifier(self):

        localctx = ProtobufParser.OneofFieldDeclIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oneofFieldDeclIdentifier)
        try:
            self.state = 344
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 40, 41, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 332
                self.alwaysIdent()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 333
                self.match(ProtobufParser.MESSAGE)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 334
                self.match(ProtobufParser.ENUM)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 4)
                self.state = 335
                self.match(ProtobufParser.ONEOF)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 336
                self.match(ProtobufParser.RESERVED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 6)
                self.state = 337
                self.match(ProtobufParser.EXTENSIONS)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 7)
                self.state = 338
                self.match(ProtobufParser.EXTEND)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 8)
                self.state = 339
                self.match(ProtobufParser.OPTION)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 9)
                self.state = 340
                self.match(ProtobufParser.OPTIONAL)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 10)
                self.state = 341
                self.match(ProtobufParser.REQUIRED)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 11)
                self.state = 342
                self.match(ProtobufParser.REPEATED)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 12)
                self.state = 343
                self.match(ProtobufParser.GROUP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def OPTIONAL(self):
            return self.getToken(ProtobufParser.OPTIONAL, 0)

        def REQUIRED(self):
            return self.getToken(ProtobufParser.REQUIRED, 0)

        def REPEATED(self):
            return self.getToken(ProtobufParser.REPEATED, 0)

        def GROUP(self):
            return self.getToken(ProtobufParser.GROUP, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_methodDeclIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclIdentifier" ):
                listener.enterMethodDeclIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclIdentifier" ):
                listener.exitMethodDeclIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclIdentifier" ):
                return visitor.visitMethodDeclIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclIdentifier(self):

        localctx = ProtobufParser.MethodDeclIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodDeclIdentifier)
        try:
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 40, 41, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 346
                self.alwaysIdent()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 2)
                self.state = 347
                self.match(ProtobufParser.MESSAGE)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 3)
                self.state = 348
                self.match(ProtobufParser.ENUM)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 4)
                self.state = 349
                self.match(ProtobufParser.ONEOF)
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 5)
                self.state = 350
                self.match(ProtobufParser.RESERVED)
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 6)
                self.state = 351
                self.match(ProtobufParser.EXTENSIONS)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 7)
                self.state = 352
                self.match(ProtobufParser.EXTEND)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 8)
                self.state = 353
                self.match(ProtobufParser.OPTION)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 9)
                self.state = 354
                self.match(ProtobufParser.OPTIONAL)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 10)
                self.state = 355
                self.match(ProtobufParser.REQUIRED)
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 11)
                self.state = 356
                self.match(ProtobufParser.REPEATED)
                pass
            elif token in [30]:
                self.enterOuterAlt(localctx, 12)
                self.state = 357
                self.match(ProtobufParser.GROUP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullyQualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_fullyQualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullyQualifiedIdentifier" ):
                listener.enterFullyQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullyQualifiedIdentifier" ):
                listener.exitFullyQualifiedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullyQualifiedIdentifier" ):
                return visitor.visitFullyQualifiedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fullyQualifiedIdentifier(self):

        localctx = ProtobufParser.FullyQualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fullyQualifiedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(ProtobufParser.DOT)
            self.state = 361
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def optionName(self):
            return self.getTypedRuleContext(ProtobufParser.OptionNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def optionValue(self):
            return self.getTypedRuleContext(ProtobufParser.OptionValueContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_optionDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionDecl" ):
                listener.enterOptionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionDecl" ):
                listener.exitOptionDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionDecl" ):
                return visitor.visitOptionDecl(self)
            else:
                return visitor.visitChildren(self)




    def optionDecl(self):

        localctx = ProtobufParser.OptionDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_optionDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(ProtobufParser.OPTION)
            self.state = 364
            self.optionName()
            self.state = 365
            self.match(ProtobufParser.EQUALS)
            self.state = 366
            self.optionValue()
            self.state = 367
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(ProtobufParser.L_BRACKET, 0)

        def compactOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.CompactOptionContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.CompactOptionContext,i)


        def R_BRACKET(self):
            return self.getToken(ProtobufParser.R_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_compactOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactOptions" ):
                listener.enterCompactOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactOptions" ):
                listener.exitCompactOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompactOptions" ):
                return visitor.visitCompactOptions(self)
            else:
                return visitor.visitChildren(self)




    def compactOptions(self):

        localctx = ProtobufParser.CompactOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_compactOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(ProtobufParser.L_BRACKET)
            self.state = 370
            self.compactOption()
            self.state = 375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 371
                self.match(ProtobufParser.COMMA)
                self.state = 372
                self.compactOption()
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 378
            self.match(ProtobufParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionName(self):
            return self.getTypedRuleContext(ProtobufParser.OptionNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def optionValue(self):
            return self.getTypedRuleContext(ProtobufParser.OptionValueContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_compactOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactOption" ):
                listener.enterCompactOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactOption" ):
                listener.exitCompactOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompactOption" ):
                return visitor.visitCompactOption(self)
            else:
                return visitor.visitChildren(self)




    def compactOption(self):

        localctx = ProtobufParser.CompactOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_compactOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 380
            self.optionName()
            self.state = 381
            self.match(ProtobufParser.EQUALS)
            self.state = 382
            self.optionValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def L_PAREN(self):
            return self.getToken(ProtobufParser.L_PAREN, 0)

        def typeName(self):
            return self.getTypedRuleContext(ProtobufParser.TypeNameContext,0)


        def R_PAREN(self):
            return self.getToken(ProtobufParser.R_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.DOT)
            else:
                return self.getToken(ProtobufParser.DOT, i)

        def optionName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.OptionNameContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.OptionNameContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_optionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionName" ):
                listener.enterOptionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionName" ):
                listener.exitOptionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionName" ):
                return visitor.visitOptionName(self)
            else:
                return visitor.visitChildren(self)




    def optionName(self):

        localctx = ProtobufParser.OptionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_optionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]:
                self.state = 384
                self.identifier()
                pass
            elif token in [58]:
                self.state = 385
                self.match(ProtobufParser.L_PAREN)
                self.state = 386
                self.typeName()
                self.state = 387
                self.match(ProtobufParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 395
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 391
                    self.match(ProtobufParser.DOT)
                    self.state = 392
                    self.optionName() 
                self.state = 397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarValue(self):
            return self.getTypedRuleContext(ProtobufParser.ScalarValueContext,0)


        def messageLiteralWithBraces(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralWithBracesContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_optionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValue" ):
                listener.enterOptionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValue" ):
                listener.exitOptionValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionValue" ):
                return visitor.visitOptionValue(self)
            else:
                return visitor.visitChildren(self)




    def optionValue(self):

        localctx = ProtobufParser.OptionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_optionValue)
        try:
            self.state = 400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 56, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 398
                self.scalarValue()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 2)
                self.state = 399
                self.messageLiteralWithBraces()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.StringLiteralContext,0)


        def uintLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.UintLiteralContext,0)


        def intLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.IntLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.FloatLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_scalarValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarValue" ):
                listener.enterScalarValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarValue" ):
                listener.exitScalarValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarValue" ):
                return visitor.visitScalarValue(self)
            else:
                return visitor.visitChildren(self)




    def scalarValue(self):

        localctx = ProtobufParser.ScalarValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_scalarValue)
        try:
            self.state = 407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 402
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 403
                self.uintLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 404
                self.intLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 405
                self.floatLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 406
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UintLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LITERAL(self):
            return self.getToken(ProtobufParser.INT_LITERAL, 0)

        def PLUS(self):
            return self.getToken(ProtobufParser.PLUS, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_uintLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUintLiteral" ):
                listener.enterUintLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUintLiteral" ):
                listener.exitUintLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUintLiteral" ):
                return visitor.visitUintLiteral(self)
            else:
                return visitor.visitChildren(self)




    def uintLiteral(self):

        localctx = ProtobufParser.UintLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_uintLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 409
                self.match(ProtobufParser.PLUS)


            self.state = 412
            self.match(ProtobufParser.INT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(ProtobufParser.MINUS, 0)

        def INT_LITERAL(self):
            return self.getToken(ProtobufParser.INT_LITERAL, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_intLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntLiteral" ):
                listener.enterIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntLiteral" ):
                listener.exitIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntLiteral" ):
                return visitor.visitIntLiteral(self)
            else:
                return visitor.visitChildren(self)




    def intLiteral(self):

        localctx = ProtobufParser.IntLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_intLiteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.match(ProtobufParser.MINUS)
            self.state = 415
            self.match(ProtobufParser.INT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(ProtobufParser.FLOAT_LITERAL, 0)

        def INF(self):
            return self.getToken(ProtobufParser.INF, 0)

        def MINUS(self):
            return self.getToken(ProtobufParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(ProtobufParser.PLUS, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatLiteral(self):

        localctx = ProtobufParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56 or _la==57:
                self.state = 417
                _la = self._input.LA(1)
                if not(_la==56 or _la==57):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 420
            _la = self._input.LA(1)
            if not(_la==11 or _la==46):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageLiteralWithBracesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def messageTextFormat(self):
            return self.getTypedRuleContext(ProtobufParser.MessageTextFormatContext,0)


        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageLiteralWithBraces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageLiteralWithBraces" ):
                listener.enterMessageLiteralWithBraces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageLiteralWithBraces" ):
                listener.exitMessageLiteralWithBraces(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageLiteralWithBraces" ):
                return visitor.visitMessageLiteralWithBraces(self)
            else:
                return visitor.visitChildren(self)




    def messageLiteralWithBraces(self):

        localctx = ProtobufParser.MessageLiteralWithBracesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_messageLiteralWithBraces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.match(ProtobufParser.L_BRACE)
            self.state = 423
            self.messageTextFormat()
            self.state = 424
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageTextFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MessageLiteralFieldContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MessageLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.SEMICOLON)
            else:
                return self.getToken(ProtobufParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageTextFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageTextFormat" ):
                listener.enterMessageTextFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageTextFormat" ):
                listener.exitMessageTextFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageTextFormat" ):
                return visitor.visitMessageTextFormat(self)
            else:
                return visitor.visitChildren(self)




    def messageTextFormat(self):

        localctx = ProtobufParser.MessageTextFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_messageTextFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4611721202799476704) != 0):
                self.state = 426
                self.messageLiteralField()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==50 or _la==51:
                    self.state = 427
                    _la = self._input.LA(1)
                    if not(_la==50 or _la==51):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 434
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageLiteralFieldName(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralFieldNameContext,0)


        def COLON(self):
            return self.getToken(ProtobufParser.COLON, 0)

        def value(self):
            return self.getTypedRuleContext(ProtobufParser.ValueContext,0)


        def messageValue(self):
            return self.getTypedRuleContext(ProtobufParser.MessageValueContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageLiteralField" ):
                listener.enterMessageLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageLiteralField" ):
                listener.exitMessageLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageLiteralField" ):
                return visitor.visitMessageLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def messageLiteralField(self):

        localctx = ProtobufParser.MessageLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_messageLiteralField)
        try:
            self.state = 442
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,32,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 435
                self.messageLiteralFieldName()
                self.state = 436
                self.match(ProtobufParser.COLON)
                self.state = 437
                self.value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 439
                self.messageLiteralFieldName()
                self.state = 440
                self.messageValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageLiteralFieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def L_BRACKET(self):
            return self.getToken(ProtobufParser.L_BRACKET, 0)

        def specialFieldName(self):
            return self.getTypedRuleContext(ProtobufParser.SpecialFieldNameContext,0)


        def R_BRACKET(self):
            return self.getToken(ProtobufParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageLiteralFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageLiteralFieldName" ):
                listener.enterMessageLiteralFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageLiteralFieldName" ):
                listener.exitMessageLiteralFieldName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageLiteralFieldName" ):
                return visitor.visitMessageLiteralFieldName(self)
            else:
                return visitor.visitChildren(self)




    def messageLiteralFieldName(self):

        localctx = ProtobufParser.MessageLiteralFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_messageLiteralFieldName)
        try:
            self.state = 449
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.fieldName()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.match(ProtobufParser.L_BRACKET)
                self.state = 446
                self.specialFieldName()
                self.state = 447
                self.match(ProtobufParser.R_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialFieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extensionFieldName(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionFieldNameContext,0)


        def typeURL(self):
            return self.getTypedRuleContext(ProtobufParser.TypeURLContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_specialFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialFieldName" ):
                listener.enterSpecialFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialFieldName" ):
                listener.exitSpecialFieldName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialFieldName" ):
                return visitor.visitSpecialFieldName(self)
            else:
                return visitor.visitChildren(self)




    def specialFieldName(self):

        localctx = ProtobufParser.SpecialFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_specialFieldName)
        try:
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 451
                self.extensionFieldName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.typeURL()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionFieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionFieldName" ):
                listener.enterExtensionFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionFieldName" ):
                listener.exitExtensionFieldName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionFieldName" ):
                return visitor.visitExtensionFieldName(self)
            else:
                return visitor.visitChildren(self)




    def extensionFieldName(self):

        localctx = ProtobufParser.ExtensionFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_extensionFieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeURLContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.QualifiedIdentifierContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,i)


        def SLASH(self):
            return self.getToken(ProtobufParser.SLASH, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_typeURL

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeURL" ):
                listener.enterTypeURL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeURL" ):
                listener.exitTypeURL(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeURL" ):
                return visitor.visitTypeURL(self)
            else:
                return visitor.visitChildren(self)




    def typeURL(self):

        localctx = ProtobufParser.TypeURLContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_typeURL)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.qualifiedIdentifier()
            self.state = 458
            self.match(ProtobufParser.SLASH)
            self.state = 459
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarValue(self):
            return self.getTypedRuleContext(ProtobufParser.ScalarValueContext,0)


        def messageLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralContext,0)


        def listLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.ListLiteralContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = ProtobufParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_value)
        try:
            self.state = 464
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 56, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.scalarValue()
                pass
            elif token in [60, 64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 462
                self.messageLiteral()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 3)
                self.state = 463
                self.listLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralContext,0)


        def listOfMessagesLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.ListOfMessagesLiteralContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageValue" ):
                listener.enterMessageValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageValue" ):
                listener.exitMessageValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageValue" ):
                return visitor.visitMessageValue(self)
            else:
                return visitor.visitChildren(self)




    def messageValue(self):

        localctx = ProtobufParser.MessageValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_messageValue)
        try:
            self.state = 468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60, 64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 466
                self.messageLiteral()
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 2)
                self.state = 467
                self.listOfMessagesLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageLiteralWithBraces(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralWithBracesContext,0)


        def L_ANGLE(self):
            return self.getToken(ProtobufParser.L_ANGLE, 0)

        def messageTextFormat(self):
            return self.getTypedRuleContext(ProtobufParser.MessageTextFormatContext,0)


        def R_ANGLE(self):
            return self.getToken(ProtobufParser.R_ANGLE, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageLiteral" ):
                listener.enterMessageLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageLiteral" ):
                listener.exitMessageLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageLiteral" ):
                return visitor.visitMessageLiteral(self)
            else:
                return visitor.visitChildren(self)




    def messageLiteral(self):

        localctx = ProtobufParser.MessageLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_messageLiteral)
        try:
            self.state = 475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                self.messageLiteralWithBraces()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.match(ProtobufParser.L_ANGLE)
                self.state = 472
                self.messageTextFormat()
                self.state = 473
                self.match(ProtobufParser.R_ANGLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(ProtobufParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(ProtobufParser.R_BRACKET, 0)

        def listElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.ListElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.ListElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_listLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLiteral" ):
                listener.enterListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLiteral" ):
                listener.exitListLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLiteral" ):
                return visitor.visitListLiteral(self)
            else:
                return visitor.visitChildren(self)




    def listLiteral(self):

        localctx = ProtobufParser.ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_listLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 477
            self.match(ProtobufParser.L_BRACKET)
            self.state = 486
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & 619266938995998719) != 0):
                self.state = 478
                self.listElement()
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 479
                    self.match(ProtobufParser.COMMA)
                    self.state = 480
                    self.listElement()
                    self.state = 485
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 488
            self.match(ProtobufParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarValue(self):
            return self.getTypedRuleContext(ProtobufParser.ScalarValueContext,0)


        def messageLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_listElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListElement" ):
                listener.enterListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListElement" ):
                listener.exitListElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListElement" ):
                return visitor.visitListElement(self)
            else:
                return visitor.visitChildren(self)




    def listElement(self):

        localctx = ProtobufParser.ListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_listElement)
        try:
            self.state = 492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 56, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.scalarValue()
                pass
            elif token in [60, 64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.messageLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListOfMessagesLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(ProtobufParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(ProtobufParser.R_BRACKET, 0)

        def messageLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MessageLiteralContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MessageLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_listOfMessagesLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListOfMessagesLiteral" ):
                listener.enterListOfMessagesLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListOfMessagesLiteral" ):
                listener.exitListOfMessagesLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListOfMessagesLiteral" ):
                return visitor.visitListOfMessagesLiteral(self)
            else:
                return visitor.visitChildren(self)




    def listOfMessagesLiteral(self):

        localctx = ProtobufParser.ListOfMessagesLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_listOfMessagesLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(ProtobufParser.L_BRACKET)
            self.state = 503
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60 or _la==64:
                self.state = 495
                self.messageLiteral()
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==51:
                    self.state = 496
                    self.match(ProtobufParser.COMMA)
                    self.state = 497
                    self.messageLiteral()
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 505
            self.match(ProtobufParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def messageName(self):
            return self.getTypedRuleContext(ProtobufParser.MessageNameContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def messageElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MessageElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MessageElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageDecl" ):
                listener.enterMessageDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageDecl" ):
                listener.exitMessageDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageDecl" ):
                return visitor.visitMessageDecl(self)
            else:
                return visitor.visitChildren(self)




    def messageDecl(self):

        localctx = ProtobufParser.MessageDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_messageDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(ProtobufParser.MESSAGE)
            self.state = 508
            self.messageName()
            self.state = 509
            self.match(ProtobufParser.L_BRACE)
            self.state = 513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5664683906301932) != 0):
                self.state = 510
                self.messageElement()
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 516
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageName" ):
                listener.enterMessageName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageName" ):
                listener.exitMessageName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageName" ):
                return visitor.visitMessageName(self)
            else:
                return visitor.visitChildren(self)




    def messageName(self):

        localctx = ProtobufParser.MessageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_messageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageFieldDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MessageFieldDeclContext,0)


        def groupDecl(self):
            return self.getTypedRuleContext(ProtobufParser.GroupDeclContext,0)


        def oneofDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OneofDeclContext,0)


        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def extensionRangeDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionRangeDeclContext,0)


        def messageReservedDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MessageReservedDeclContext,0)


        def messageDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MessageDeclContext,0)


        def enumDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EnumDeclContext,0)


        def extensionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionDeclContext,0)


        def mapFieldDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MapFieldDeclContext,0)


        def emptyDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EmptyDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageElement" ):
                listener.enterMessageElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageElement" ):
                listener.exitMessageElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageElement" ):
                return visitor.visitMessageElement(self)
            else:
                return visitor.visitChildren(self)




    def messageElement(self):

        localctx = ProtobufParser.MessageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_messageElement)
        try:
            self.state = 532
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                self.messageFieldDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 521
                self.groupDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.oneofDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 523
                self.optionDecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 524
                self.extensionRangeDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 525
                self.messageReservedDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 526
                self.messageDecl()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 527
                self.enumDecl()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 528
                self.extensionDecl()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 529
                self.mapFieldDecl()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 530
                self.emptyDecl()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 531
                self.commentDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageFieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclWithCardinality(self):
            return self.getTypedRuleContext(ProtobufParser.FieldDeclWithCardinalityContext,0)


        def messageFieldDeclTypeName(self):
            return self.getTypedRuleContext(ProtobufParser.MessageFieldDeclTypeNameContext,0)


        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageFieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageFieldDecl" ):
                listener.enterMessageFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageFieldDecl" ):
                listener.exitMessageFieldDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageFieldDecl" ):
                return visitor.visitMessageFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def messageFieldDecl(self):

        localctx = ProtobufParser.MessageFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_messageFieldDecl)
        self._la = 0 # Token type
        try:
            self.state = 544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.fieldDeclWithCardinality()
                pass
            elif token in [5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 40, 41, 42, 43, 44, 52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.messageFieldDeclTypeName()
                self.state = 536
                self.fieldName()
                self.state = 537
                self.match(ProtobufParser.EQUALS)
                self.state = 538
                self.fieldNumber()
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62:
                    self.state = 539
                    self.compactOptions()


                self.state = 542
                self.match(ProtobufParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclWithCardinalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldCardinality(self):
            return self.getTypedRuleContext(ProtobufParser.FieldCardinalityContext,0)


        def fieldDeclTypeName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldDeclTypeNameContext,0)


        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldDeclWithCardinality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclWithCardinality" ):
                listener.enterFieldDeclWithCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclWithCardinality" ):
                listener.exitFieldDeclWithCardinality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclWithCardinality" ):
                return visitor.visitFieldDeclWithCardinality(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclWithCardinality(self):

        localctx = ProtobufParser.FieldDeclWithCardinalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fieldDeclWithCardinality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 546
            self.fieldCardinality()
            self.state = 547
            self.fieldDeclTypeName()
            self.state = 548
            self.fieldName()
            self.state = 549
            self.match(ProtobufParser.EQUALS)
            self.state = 550
            self.fieldNumber()
            self.state = 552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 551
                self.compactOptions()


            self.state = 554
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldCardinalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRED(self):
            return self.getToken(ProtobufParser.REQUIRED, 0)

        def OPTIONAL(self):
            return self.getToken(ProtobufParser.OPTIONAL, 0)

        def REPEATED(self):
            return self.getToken(ProtobufParser.REPEATED, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldCardinality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldCardinality" ):
                listener.enterFieldCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldCardinality" ):
                listener.exitFieldCardinality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldCardinality" ):
                return visitor.visitFieldCardinality(self)
            else:
                return visitor.visitChildren(self)




    def fieldCardinality(self):

        localctx = ProtobufParser.FieldCardinalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_fieldCardinality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 28672) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldName" ):
                listener.enterFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldName" ):
                listener.exitFieldName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldName" ):
                return visitor.visitFieldName(self)
            else:
                return visitor.visitChildren(self)




    def fieldName(self):

        localctx = ProtobufParser.FieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_fieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 558
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LITERAL(self):
            return self.getToken(ProtobufParser.INT_LITERAL, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldNumber" ):
                listener.enterFieldNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldNumber" ):
                listener.exitFieldNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldNumber" ):
                return visitor.visitFieldNumber(self)
            else:
                return visitor.visitChildren(self)




    def fieldNumber(self):

        localctx = ProtobufParser.FieldNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_fieldNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 560
            self.match(ProtobufParser.INT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapFieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapType(self):
            return self.getTypedRuleContext(ProtobufParser.MapTypeContext,0)


        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_mapFieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapFieldDecl" ):
                listener.enterMapFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapFieldDecl" ):
                listener.exitMapFieldDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapFieldDecl" ):
                return visitor.visitMapFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def mapFieldDecl(self):

        localctx = ProtobufParser.MapFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_mapFieldDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.mapType()
            self.state = 563
            self.fieldName()
            self.state = 564
            self.match(ProtobufParser.EQUALS)
            self.state = 565
            self.fieldNumber()
            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 566
                self.compactOptions()


            self.state = 569
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(ProtobufParser.MAP, 0)

        def L_ANGLE(self):
            return self.getToken(ProtobufParser.L_ANGLE, 0)

        def mapKeyType(self):
            return self.getTypedRuleContext(ProtobufParser.MapKeyTypeContext,0)


        def COMMA(self):
            return self.getToken(ProtobufParser.COMMA, 0)

        def typeName(self):
            return self.getTypedRuleContext(ProtobufParser.TypeNameContext,0)


        def R_ANGLE(self):
            return self.getToken(ProtobufParser.R_ANGLE, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_mapType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapType" ):
                listener.enterMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapType" ):
                listener.exitMapType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapType" ):
                return visitor.visitMapType(self)
            else:
                return visitor.visitChildren(self)




    def mapType(self):

        localctx = ProtobufParser.MapTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_mapType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(ProtobufParser.MAP)
            self.state = 572
            self.match(ProtobufParser.L_ANGLE)
            self.state = 573
            self.mapKeyType()
            self.state = 574
            self.match(ProtobufParser.COMMA)
            self.state = 575
            self.typeName()
            self.state = 576
            self.match(ProtobufParser.R_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapKeyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT32(self):
            return self.getToken(ProtobufParser.INT32, 0)

        def INT64(self):
            return self.getToken(ProtobufParser.INT64, 0)

        def UINT32(self):
            return self.getToken(ProtobufParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(ProtobufParser.UINT64, 0)

        def SINT32(self):
            return self.getToken(ProtobufParser.SINT32, 0)

        def SINT64(self):
            return self.getToken(ProtobufParser.SINT64, 0)

        def FIXED32(self):
            return self.getToken(ProtobufParser.FIXED32, 0)

        def FIXED64(self):
            return self.getToken(ProtobufParser.FIXED64, 0)

        def SFIXED32(self):
            return self.getToken(ProtobufParser.SFIXED32, 0)

        def SFIXED64(self):
            return self.getToken(ProtobufParser.SFIXED64, 0)

        def BOOL(self):
            return self.getToken(ProtobufParser.BOOL, 0)

        def STRING(self):
            return self.getToken(ProtobufParser.STRING, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_mapKeyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapKeyType" ):
                listener.enterMapKeyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapKeyType" ):
                listener.exitMapKeyType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapKeyType" ):
                return visitor.visitMapKeyType(self)
            else:
                return visitor.visitChildren(self)




    def mapKeyType(self):

        localctx = ProtobufParser.MapKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_mapKeyType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 1072791552) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(ProtobufParser.GROUP, 0)

        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def fieldCardinality(self):
            return self.getTypedRuleContext(ProtobufParser.FieldCardinalityContext,0)


        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def messageElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MessageElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MessageElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_groupDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupDecl" ):
                listener.enterGroupDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupDecl" ):
                listener.exitGroupDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupDecl" ):
                return visitor.visitGroupDecl(self)
            else:
                return visitor.visitChildren(self)




    def groupDecl(self):

        localctx = ProtobufParser.GroupDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_groupDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 28672) != 0):
                self.state = 580
                self.fieldCardinality()


            self.state = 583
            self.match(ProtobufParser.GROUP)
            self.state = 584
            self.fieldName()
            self.state = 585
            self.match(ProtobufParser.EQUALS)
            self.state = 586
            self.fieldNumber()
            self.state = 588
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 587
                self.compactOptions()


            self.state = 590
            self.match(ProtobufParser.L_BRACE)
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5664683906301932) != 0):
                self.state = 591
                self.messageElement()
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 597
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def oneofName(self):
            return self.getTypedRuleContext(ProtobufParser.OneofNameContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def oneofElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.OneofElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.OneofElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofDecl" ):
                listener.enterOneofDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofDecl" ):
                listener.exitOneofDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofDecl" ):
                return visitor.visitOneofDecl(self)
            else:
                return visitor.visitChildren(self)




    def oneofDecl(self):

        localctx = ProtobufParser.OneofDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oneofDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(ProtobufParser.ONEOF)
            self.state = 600
            self.oneofName()
            self.state = 601
            self.match(ProtobufParser.L_BRACE)
            self.state = 605
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4534385952948204) != 0):
                self.state = 602
                self.oneofElement()
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 608
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofName" ):
                listener.enterOneofName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofName" ):
                listener.exitOneofName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofName" ):
                return visitor.visitOneofName(self)
            else:
                return visitor.visitChildren(self)




    def oneofName(self):

        localctx = ProtobufParser.OneofNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oneofName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def oneofFieldDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OneofFieldDeclContext,0)


        def oneofGroupDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OneofGroupDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofElement" ):
                listener.enterOneofElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofElement" ):
                listener.exitOneofElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofElement" ):
                return visitor.visitOneofElement(self)
            else:
                return visitor.visitChildren(self)




    def oneofElement(self):

        localctx = ProtobufParser.OneofElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oneofElement)
        try:
            self.state = 616
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 612
                self.optionDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.oneofFieldDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 614
                self.oneofGroupDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 615
                self.commentDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofFieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oneofFieldDeclTypeName(self):
            return self.getTypedRuleContext(ProtobufParser.OneofFieldDeclTypeNameContext,0)


        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofFieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofFieldDecl" ):
                listener.enterOneofFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofFieldDecl" ):
                listener.exitOneofFieldDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofFieldDecl" ):
                return visitor.visitOneofFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def oneofFieldDecl(self):

        localctx = ProtobufParser.OneofFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oneofFieldDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.oneofFieldDeclTypeName()
            self.state = 619
            self.fieldName()
            self.state = 620
            self.match(ProtobufParser.EQUALS)
            self.state = 621
            self.fieldNumber()
            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 622
                self.compactOptions()


            self.state = 625
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofGroupDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(ProtobufParser.GROUP, 0)

        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def messageElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MessageElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MessageElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofGroupDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofGroupDecl" ):
                listener.enterOneofGroupDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofGroupDecl" ):
                listener.exitOneofGroupDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofGroupDecl" ):
                return visitor.visitOneofGroupDecl(self)
            else:
                return visitor.visitChildren(self)




    def oneofGroupDecl(self):

        localctx = ProtobufParser.OneofGroupDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oneofGroupDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(ProtobufParser.GROUP)
            self.state = 628
            self.fieldName()
            self.state = 629
            self.match(ProtobufParser.EQUALS)
            self.state = 630
            self.fieldNumber()
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 631
                self.compactOptions()


            self.state = 634
            self.match(ProtobufParser.L_BRACE)
            self.state = 638
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 5664683906301932) != 0):
                self.state = 635
                self.messageElement()
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 641
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionRangeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def tagRanges(self):
            return self.getTypedRuleContext(ProtobufParser.TagRangesContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionRangeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionRangeDecl" ):
                listener.enterExtensionRangeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionRangeDecl" ):
                listener.exitExtensionRangeDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionRangeDecl" ):
                return visitor.visitExtensionRangeDecl(self)
            else:
                return visitor.visitChildren(self)




    def extensionRangeDecl(self):

        localctx = ProtobufParser.ExtensionRangeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_extensionRangeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 643
            self.match(ProtobufParser.EXTENSIONS)
            self.state = 644
            self.tagRanges()
            self.state = 646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 645
                self.compactOptions()


            self.state = 648
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagRangesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.TagRangeContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.TagRangeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_tagRanges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagRanges" ):
                listener.enterTagRanges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagRanges" ):
                listener.exitTagRanges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagRanges" ):
                return visitor.visitTagRanges(self)
            else:
                return visitor.visitChildren(self)




    def tagRanges(self):

        localctx = ProtobufParser.TagRangesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_tagRanges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.tagRange()
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 651
                self.match(ProtobufParser.COMMA)
                self.state = 652
                self.tagRange()
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagRangeStart(self):
            return self.getTypedRuleContext(ProtobufParser.TagRangeStartContext,0)


        def TO(self):
            return self.getToken(ProtobufParser.TO, 0)

        def tagRangeEnd(self):
            return self.getTypedRuleContext(ProtobufParser.TagRangeEndContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_tagRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagRange" ):
                listener.enterTagRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagRange" ):
                listener.exitTagRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagRange" ):
                return visitor.visitTagRange(self)
            else:
                return visitor.visitChildren(self)




    def tagRange(self):

        localctx = ProtobufParser.TagRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tagRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 658
            self.tagRangeStart()
            self.state = 661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 659
                self.match(ProtobufParser.TO)
                self.state = 660
                self.tagRangeEnd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagRangeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_tagRangeStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagRangeStart" ):
                listener.enterTagRangeStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagRangeStart" ):
                listener.exitTagRangeStart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagRangeStart" ):
                return visitor.visitTagRangeStart(self)
            else:
                return visitor.visitChildren(self)




    def tagRangeStart(self):

        localctx = ProtobufParser.TagRangeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tagRangeStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 663
            self.fieldNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagRangeEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def MAX(self):
            return self.getToken(ProtobufParser.MAX, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_tagRangeEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagRangeEnd" ):
                listener.enterTagRangeEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagRangeEnd" ):
                listener.exitTagRangeEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagRangeEnd" ):
                return visitor.visitTagRangeEnd(self)
            else:
                return visitor.visitChildren(self)




    def tagRangeEnd(self):

        localctx = ProtobufParser.TagRangeEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tagRangeEnd)
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 665
                self.fieldNumber()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.match(ProtobufParser.MAX)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageReservedDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def tagRanges(self):
            return self.getTypedRuleContext(ProtobufParser.TagRangesContext,0)


        def names(self):
            return self.getTypedRuleContext(ProtobufParser.NamesContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageReservedDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageReservedDecl" ):
                listener.enterMessageReservedDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageReservedDecl" ):
                listener.exitMessageReservedDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageReservedDecl" ):
                return visitor.visitMessageReservedDecl(self)
            else:
                return visitor.visitChildren(self)




    def messageReservedDecl(self):

        localctx = ProtobufParser.MessageReservedDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_messageReservedDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(ProtobufParser.RESERVED)
            self.state = 672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45]:
                self.state = 670
                self.tagRanges()
                pass
            elif token in [49]:
                self.state = 671
                self.names()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 674
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.StringLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNames" ):
                listener.enterNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNames" ):
                listener.exitNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNames" ):
                return visitor.visitNames(self)
            else:
                return visitor.visitChildren(self)




    def names(self):

        localctx = ProtobufParser.NamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 676
            self.stringLiteral()
            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 677
                self.match(ProtobufParser.COMMA)
                self.state = 678
                self.stringLiteral()
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def enumName(self):
            return self.getTypedRuleContext(ProtobufParser.EnumNameContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def enumElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.EnumElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.EnumElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDecl" ):
                listener.enterEnumDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDecl" ):
                listener.exitEnumDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDecl" ):
                return visitor.visitEnumDecl(self)
            else:
                return visitor.visitChildren(self)




    def enumDecl(self):

        localctx = ProtobufParser.EnumDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_enumDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(ProtobufParser.ENUM)
            self.state = 685
            self.enumName()
            self.state = 686
            self.match(ProtobufParser.L_BRACE)
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1161084278931436) != 0):
                self.state = 687
                self.enumElement()
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 693
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumName" ):
                listener.enterEnumName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumName" ):
                listener.exitEnumName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumName" ):
                return visitor.visitEnumName(self)
            else:
                return visitor.visitChildren(self)




    def enumName(self):

        localctx = ProtobufParser.EnumNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_enumName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def enumValueDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueDeclContext,0)


        def enumReservedDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EnumReservedDeclContext,0)


        def emptyDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EmptyDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumElement" ):
                listener.enterEnumElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumElement" ):
                listener.exitEnumElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumElement" ):
                return visitor.visitEnumElement(self)
            else:
                return visitor.visitChildren(self)




    def enumElement(self):

        localctx = ProtobufParser.EnumElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_enumElement)
        try:
            self.state = 702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 697
                self.optionDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 698
                self.enumValueDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 699
                self.enumReservedDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 700
                self.emptyDecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 701
                self.commentDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumValueName(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def enumValueNumber(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueDecl" ):
                listener.enterEnumValueDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueDecl" ):
                listener.exitEnumValueDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueDecl" ):
                return visitor.visitEnumValueDecl(self)
            else:
                return visitor.visitChildren(self)




    def enumValueDecl(self):

        localctx = ProtobufParser.EnumValueDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_enumValueDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.enumValueName()
            self.state = 705
            self.match(ProtobufParser.EQUALS)
            self.state = 706
            self.enumValueNumber()
            self.state = 708
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 707
                self.compactOptions()


            self.state = 710
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueName" ):
                listener.enterEnumValueName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueName" ):
                listener.exitEnumValueName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueName" ):
                return visitor.visitEnumValueName(self)
            else:
                return visitor.visitChildren(self)




    def enumValueName(self):

        localctx = ProtobufParser.EnumValueNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_enumValueName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LITERAL(self):
            return self.getToken(ProtobufParser.INT_LITERAL, 0)

        def MINUS(self):
            return self.getToken(ProtobufParser.MINUS, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueNumber" ):
                listener.enterEnumValueNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueNumber" ):
                listener.exitEnumValueNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueNumber" ):
                return visitor.visitEnumValueNumber(self)
            else:
                return visitor.visitChildren(self)




    def enumValueNumber(self):

        localctx = ProtobufParser.EnumValueNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_enumValueNumber)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 714
                self.match(ProtobufParser.MINUS)


            self.state = 717
            self.match(ProtobufParser.INT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumReservedDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def enumValueRanges(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueRangesContext,0)


        def names(self):
            return self.getTypedRuleContext(ProtobufParser.NamesContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumReservedDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumReservedDecl" ):
                listener.enterEnumReservedDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumReservedDecl" ):
                listener.exitEnumReservedDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumReservedDecl" ):
                return visitor.visitEnumReservedDecl(self)
            else:
                return visitor.visitChildren(self)




    def enumReservedDecl(self):

        localctx = ProtobufParser.EnumReservedDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_enumReservedDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(ProtobufParser.RESERVED)
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45, 56]:
                self.state = 720
                self.enumValueRanges()
                pass
            elif token in [49]:
                self.state = 721
                self.names()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 724
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueRangesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumValueRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.EnumValueRangeContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.EnumValueRangeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueRanges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueRanges" ):
                listener.enterEnumValueRanges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueRanges" ):
                listener.exitEnumValueRanges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueRanges" ):
                return visitor.visitEnumValueRanges(self)
            else:
                return visitor.visitChildren(self)




    def enumValueRanges(self):

        localctx = ProtobufParser.EnumValueRangesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_enumValueRanges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.enumValueRange()
            self.state = 731
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==51:
                self.state = 727
                self.match(ProtobufParser.COMMA)
                self.state = 728
                self.enumValueRange()
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumValueRangeStart(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueRangeStartContext,0)


        def TO(self):
            return self.getToken(ProtobufParser.TO, 0)

        def enumValueRangeEnd(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueRangeEndContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueRange" ):
                listener.enterEnumValueRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueRange" ):
                listener.exitEnumValueRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueRange" ):
                return visitor.visitEnumValueRange(self)
            else:
                return visitor.visitChildren(self)




    def enumValueRange(self):

        localctx = ProtobufParser.EnumValueRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_enumValueRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.enumValueRangeStart()
            self.state = 737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==34:
                self.state = 735
                self.match(ProtobufParser.TO)
                self.state = 736
                self.enumValueRangeEnd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueRangeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumValueNumber(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueNumberContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueRangeStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueRangeStart" ):
                listener.enterEnumValueRangeStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueRangeStart" ):
                listener.exitEnumValueRangeStart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueRangeStart" ):
                return visitor.visitEnumValueRangeStart(self)
            else:
                return visitor.visitChildren(self)




    def enumValueRangeStart(self):

        localctx = ProtobufParser.EnumValueRangeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_enumValueRangeStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.enumValueNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueRangeEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumValueNumber(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueNumberContext,0)


        def MAX(self):
            return self.getToken(ProtobufParser.MAX, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueRangeEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueRangeEnd" ):
                listener.enterEnumValueRangeEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueRangeEnd" ):
                listener.exitEnumValueRangeEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueRangeEnd" ):
                return visitor.visitEnumValueRangeEnd(self)
            else:
                return visitor.visitChildren(self)




    def enumValueRangeEnd(self):

        localctx = ProtobufParser.EnumValueRangeEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_enumValueRangeEnd)
        try:
            self.state = 743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [45, 56]:
                self.enterOuterAlt(localctx, 1)
                self.state = 741
                self.enumValueNumber()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 742
                self.match(ProtobufParser.MAX)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def extendedMessage(self):
            return self.getTypedRuleContext(ProtobufParser.ExtendedMessageContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def extensionElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.ExtensionElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.ExtensionElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionDecl" ):
                listener.enterExtensionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionDecl" ):
                listener.exitExtensionDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionDecl" ):
                return visitor.visitExtensionDecl(self)
            else:
                return visitor.visitChildren(self)




    def extensionDecl(self):

        localctx = ProtobufParser.ExtensionDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_extensionDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.match(ProtobufParser.EXTEND)
            self.state = 746
            self.extendedMessage()
            self.state = 747
            self.match(ProtobufParser.L_BRACE)
            self.state = 751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 4538783999459296) != 0):
                self.state = 748
                self.extensionElement()
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 754
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedMessageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(ProtobufParser.TypeNameContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extendedMessage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedMessage" ):
                listener.enterExtendedMessage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedMessage" ):
                listener.exitExtendedMessage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedMessage" ):
                return visitor.visitExtendedMessage(self)
            else:
                return visitor.visitChildren(self)




    def extendedMessage(self):

        localctx = ProtobufParser.ExtendedMessageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_extendedMessage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.typeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extensionFieldDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionFieldDeclContext,0)


        def groupDecl(self):
            return self.getTypedRuleContext(ProtobufParser.GroupDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionElement" ):
                listener.enterExtensionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionElement" ):
                listener.exitExtensionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionElement" ):
                return visitor.visitExtensionElement(self)
            else:
                return visitor.visitChildren(self)




    def extensionElement(self):

        localctx = ProtobufParser.ExtensionElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_extensionElement)
        try:
            self.state = 760
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.extensionFieldDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 759
                self.groupDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionFieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclWithCardinality(self):
            return self.getTypedRuleContext(ProtobufParser.FieldDeclWithCardinalityContext,0)


        def extensionFieldDeclTypeName(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionFieldDeclTypeNameContext,0)


        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionFieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionFieldDecl" ):
                listener.enterExtensionFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionFieldDecl" ):
                listener.exitExtensionFieldDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionFieldDecl" ):
                return visitor.visitExtensionFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def extensionFieldDecl(self):

        localctx = ProtobufParser.ExtensionFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_extensionFieldDecl)
        self._la = 0 # Token type
        try:
            self.state = 772
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [12, 13, 14]:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.fieldDeclWithCardinality()
                pass
            elif token in [5, 6, 7, 8, 9, 10, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 52]:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.extensionFieldDeclTypeName()
                self.state = 764
                self.fieldName()
                self.state = 765
                self.match(ProtobufParser.EQUALS)
                self.state = 766
                self.fieldNumber()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==62:
                    self.state = 767
                    self.compactOptions()


                self.state = 770
                self.match(ProtobufParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE(self):
            return self.getToken(ProtobufParser.SERVICE, 0)

        def serviceName(self):
            return self.getTypedRuleContext(ProtobufParser.ServiceNameContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def serviceElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.ServiceElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.ServiceElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_serviceDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDecl" ):
                listener.enterServiceDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDecl" ):
                listener.exitServiceDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServiceDecl" ):
                return visitor.visitServiceDecl(self)
            else:
                return visitor.visitChildren(self)




    def serviceDecl(self):

        localctx = ProtobufParser.ServiceDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_serviceDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(ProtobufParser.SERVICE)
            self.state = 775
            self.serviceName()
            self.state = 776
            self.match(ProtobufParser.L_BRACE)
            self.state = 780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1128098930099212) != 0):
                self.state = 777
                self.serviceElement()
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 783
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_serviceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceName" ):
                listener.enterServiceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceName" ):
                listener.exitServiceName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServiceName" ):
                return visitor.visitServiceName(self)
            else:
                return visitor.visitChildren(self)




    def serviceName(self):

        localctx = ProtobufParser.ServiceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_serviceName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def methodDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MethodDeclContext,0)


        def emptyDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EmptyDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_serviceElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceElement" ):
                listener.enterServiceElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceElement" ):
                listener.exitServiceElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServiceElement" ):
                return visitor.visitServiceElement(self)
            else:
                return visitor.visitChildren(self)




    def serviceElement(self):

        localctx = ProtobufParser.ServiceElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_serviceElement)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 787
                self.optionDecl()
                pass
            elif token in [2, 3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.commentDecl()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 789
                self.methodDecl()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 4)
                self.state = 790
                self.emptyDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RPC(self):
            return self.getToken(ProtobufParser.RPC, 0)

        def methodName(self):
            return self.getTypedRuleContext(ProtobufParser.MethodNameContext,0)


        def inputType(self):
            return self.getTypedRuleContext(ProtobufParser.InputTypeContext,0)


        def RETURNS(self):
            return self.getToken(ProtobufParser.RETURNS, 0)

        def outputType(self):
            return self.getTypedRuleContext(ProtobufParser.OutputTypeContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def methodElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MethodElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MethodElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_methodDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDecl" ):
                listener.enterMethodDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDecl" ):
                listener.exitMethodDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDecl" ):
                return visitor.visitMethodDecl(self)
            else:
                return visitor.visitChildren(self)




    def methodDecl(self):

        localctx = ProtobufParser.MethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_methodDecl)
        self._la = 0 # Token type
        try:
            self.state = 814
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 793
                self.match(ProtobufParser.RPC)
                self.state = 794
                self.methodName()
                self.state = 795
                self.inputType()
                self.state = 796
                self.match(ProtobufParser.RETURNS)
                self.state = 797
                self.outputType()
                self.state = 798
                self.match(ProtobufParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 800
                self.match(ProtobufParser.RPC)
                self.state = 801
                self.methodName()
                self.state = 802
                self.inputType()
                self.state = 803
                self.match(ProtobufParser.RETURNS)
                self.state = 804
                self.outputType()
                self.state = 805
                self.match(ProtobufParser.L_BRACE)
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 1125899906843660) != 0):
                    self.state = 806
                    self.methodElement()
                    self.state = 811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 812
                self.match(ProtobufParser.R_BRACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_methodName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodName" ):
                listener.enterMethodName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodName" ):
                listener.exitMethodName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodName" ):
                return visitor.visitMethodName(self)
            else:
                return visitor.visitChildren(self)




    def methodName(self):

        localctx = ProtobufParser.MethodNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_methodName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageType(self):
            return self.getTypedRuleContext(ProtobufParser.MessageTypeContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_inputType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputType" ):
                listener.enterInputType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputType" ):
                listener.exitInputType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputType" ):
                return visitor.visitInputType(self)
            else:
                return visitor.visitChildren(self)




    def inputType(self):

        localctx = ProtobufParser.InputTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_inputType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.messageType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageType(self):
            return self.getTypedRuleContext(ProtobufParser.MessageTypeContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_outputType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputType" ):
                listener.enterOutputType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputType" ):
                listener.exitOutputType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputType" ):
                return visitor.visitOutputType(self)
            else:
                return visitor.visitChildren(self)




    def outputType(self):

        localctx = ProtobufParser.OutputTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_outputType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.messageType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def emptyDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EmptyDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_methodElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodElement" ):
                listener.enterMethodElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodElement" ):
                listener.exitMethodElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodElement" ):
                return visitor.visitMethodElement(self)
            else:
                return visitor.visitChildren(self)




    def methodElement(self):

        localctx = ProtobufParser.MethodElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_methodElement)
        try:
            self.state = 825
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.optionDecl()
                pass
            elif token in [2, 3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.commentDecl()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 3)
                self.state = 824
                self.emptyDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(ProtobufParser.L_PAREN, 0)

        def methodDeclTypeName(self):
            return self.getTypedRuleContext(ProtobufParser.MethodDeclTypeNameContext,0)


        def R_PAREN(self):
            return self.getToken(ProtobufParser.R_PAREN, 0)

        def STREAM(self):
            return self.getToken(ProtobufParser.STREAM, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageType" ):
                listener.enterMessageType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageType" ):
                listener.exitMessageType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageType" ):
                return visitor.visitMessageType(self)
            else:
                return visitor.visitChildren(self)




    def messageType(self):

        localctx = ProtobufParser.MessageTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_messageType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.match(ProtobufParser.L_PAREN)
            self.state = 829
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 828
                self.match(ProtobufParser.STREAM)


            self.state = 831
            self.methodDeclTypeName()
            self.state = 832
            self.match(ProtobufParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def sometimesIdent(self):
            return self.getTypedRuleContext(ProtobufParser.SometimesIdentContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = ProtobufParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_identifier)
        try:
            self.state = 836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 40, 41, 43, 44]:
                self.enterOuterAlt(localctx, 1)
                self.state = 834
                self.alwaysIdent()
                pass
            elif token in [10, 12, 13, 14, 30, 31, 33, 36, 37, 38, 39, 42]:
                self.enterOuterAlt(localctx, 2)
                self.state = 835
                self.sometimesIdent()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlwaysIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ProtobufParser.IDENTIFIER, 0)

        def SYNTAX(self):
            return self.getToken(ProtobufParser.SYNTAX, 0)

        def IMPORT(self):
            return self.getToken(ProtobufParser.IMPORT, 0)

        def WEAK(self):
            return self.getToken(ProtobufParser.WEAK, 0)

        def PUBLIC(self):
            return self.getToken(ProtobufParser.PUBLIC, 0)

        def PACKAGE(self):
            return self.getToken(ProtobufParser.PACKAGE, 0)

        def INF(self):
            return self.getToken(ProtobufParser.INF, 0)

        def BOOL(self):
            return self.getToken(ProtobufParser.BOOL, 0)

        def STRING(self):
            return self.getToken(ProtobufParser.STRING, 0)

        def BYTES(self):
            return self.getToken(ProtobufParser.BYTES, 0)

        def FLOAT(self):
            return self.getToken(ProtobufParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(ProtobufParser.DOUBLE, 0)

        def INT32(self):
            return self.getToken(ProtobufParser.INT32, 0)

        def INT64(self):
            return self.getToken(ProtobufParser.INT64, 0)

        def UINT32(self):
            return self.getToken(ProtobufParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(ProtobufParser.UINT64, 0)

        def SINT32(self):
            return self.getToken(ProtobufParser.SINT32, 0)

        def SINT64(self):
            return self.getToken(ProtobufParser.SINT64, 0)

        def FIXED32(self):
            return self.getToken(ProtobufParser.FIXED32, 0)

        def FIXED64(self):
            return self.getToken(ProtobufParser.FIXED64, 0)

        def SFIXED32(self):
            return self.getToken(ProtobufParser.SFIXED32, 0)

        def SFIXED64(self):
            return self.getToken(ProtobufParser.SFIXED64, 0)

        def MAP(self):
            return self.getToken(ProtobufParser.MAP, 0)

        def TO(self):
            return self.getToken(ProtobufParser.TO, 0)

        def MAX(self):
            return self.getToken(ProtobufParser.MAX, 0)

        def SERVICE(self):
            return self.getToken(ProtobufParser.SERVICE, 0)

        def RPC(self):
            return self.getToken(ProtobufParser.RPC, 0)

        def RETURNS(self):
            return self.getToken(ProtobufParser.RETURNS, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_alwaysIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlwaysIdent" ):
                listener.enterAlwaysIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlwaysIdent" ):
                listener.exitAlwaysIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlwaysIdent" ):
                return visitor.visitAlwaysIdent(self)
            else:
                return visitor.visitChildren(self)




    def alwaysIdent(self):

        localctx = ProtobufParser.AlwaysIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_alwaysIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 29743722236896) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SometimesIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def OPTIONAL(self):
            return self.getToken(ProtobufParser.OPTIONAL, 0)

        def REQUIRED(self):
            return self.getToken(ProtobufParser.REQUIRED, 0)

        def REPEATED(self):
            return self.getToken(ProtobufParser.REPEATED, 0)

        def GROUP(self):
            return self.getToken(ProtobufParser.GROUP, 0)

        def STREAM(self):
            return self.getToken(ProtobufParser.STREAM, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_sometimesIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSometimesIdent" ):
                listener.enterSometimesIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSometimesIdent" ):
                listener.exitSometimesIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSometimesIdent" ):
                return visitor.visitSometimesIdent(self)
            else:
                return visitor.visitChildren(self)




    def sometimesIdent(self):

        localctx = ProtobufParser.SometimesIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_sometimesIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 5440649851904) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





