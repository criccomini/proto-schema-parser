# Generated from antlr/ProtobufParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,66,854,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
        6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,
        2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,
        7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,
        2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,
        7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,
        2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,
        7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,
        2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,59,
        7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,65,
        2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,72,
        7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,78,
        2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
        7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
        2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,3,0,196,8,
        0,1,0,5,0,199,8,0,10,0,12,0,202,9,0,1,0,3,0,205,8,0,1,0,5,0,208,
        8,0,10,0,12,0,211,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,3,1,224,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,4,5,236,8,
        5,11,5,12,5,237,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,3,9,250,
        8,9,1,9,1,9,1,9,1,10,1,10,1,11,3,11,258,8,11,1,11,1,11,1,12,1,12,
        1,12,5,12,265,8,12,10,12,12,12,268,9,12,1,13,1,13,1,13,3,13,273,
        8,13,1,13,3,13,276,8,13,1,14,1,14,1,14,3,14,281,8,14,1,14,3,14,284,
        8,14,1,15,1,15,1,15,3,15,289,8,15,1,15,3,15,292,8,15,1,16,1,16,1,
        16,3,16,297,8,16,1,16,3,16,300,8,16,1,17,1,17,1,17,3,17,305,8,17,
        1,17,3,17,308,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,3,18,322,8,18,1,19,1,19,3,19,326,8,19,1,20,1,20,1,
        20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,337,8,20,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,351,8,21,1,22,1,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,365,8,
        22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,
        25,5,25,380,8,25,10,25,12,25,383,9,25,1,25,1,25,1,26,1,26,1,26,1,
        26,1,27,1,27,1,27,1,27,1,27,3,27,396,8,27,1,27,1,27,5,27,400,8,27,
        10,27,12,27,403,9,27,1,28,1,28,3,28,407,8,28,1,29,1,29,1,29,1,29,
        1,29,3,29,414,8,29,1,30,3,30,417,8,30,1,30,1,30,1,31,3,31,422,8,
        31,1,31,1,31,1,32,1,32,1,32,1,32,3,32,430,8,32,1,33,1,33,1,33,1,
        33,1,34,1,34,3,34,438,8,34,5,34,440,8,34,10,34,12,34,443,9,34,1,
        35,1,35,1,35,1,35,1,35,1,35,1,35,3,35,452,8,35,1,36,1,36,1,36,1,
        36,1,36,3,36,459,8,36,1,37,1,37,3,37,463,8,37,1,38,1,38,1,39,1,39,
        1,39,1,39,1,40,1,40,1,40,3,40,474,8,40,1,41,1,41,3,41,478,8,41,1,
        42,1,42,1,42,1,42,1,42,3,42,485,8,42,1,43,1,43,1,43,1,43,5,43,491,
        8,43,10,43,12,43,494,9,43,3,43,496,8,43,1,43,1,43,1,44,1,44,3,44,
        502,8,44,1,45,1,45,1,45,1,45,5,45,508,8,45,10,45,12,45,511,9,45,
        3,45,513,8,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,521,8,46,10,46,
        12,46,524,9,46,1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,3,48,542,8,48,1,49,1,49,1,49,1,49,
        1,49,1,49,3,49,550,8,49,1,49,1,49,3,49,554,8,49,1,50,1,50,1,50,1,
        50,1,50,1,50,3,50,562,8,50,1,50,1,50,1,51,1,51,1,52,1,52,1,53,1,
        53,1,54,1,54,1,54,1,54,1,54,3,54,577,8,54,1,54,1,54,1,55,1,55,1,
        55,1,55,1,55,1,55,1,55,1,56,1,56,1,57,3,57,591,8,57,1,57,1,57,1,
        57,1,57,1,57,3,57,598,8,57,1,57,1,57,5,57,602,8,57,10,57,12,57,605,
        9,57,1,57,1,57,1,58,1,58,1,58,1,58,5,58,613,8,58,10,58,12,58,616,
        9,58,1,58,1,58,1,59,1,59,1,60,1,60,1,60,1,60,3,60,626,8,60,1,61,
        1,61,1,61,1,61,1,61,3,61,633,8,61,1,61,1,61,1,62,1,62,1,62,1,62,
        1,62,3,62,642,8,62,1,62,1,62,5,62,646,8,62,10,62,12,62,649,9,62,
        1,62,1,62,1,63,1,63,1,63,3,63,656,8,63,1,63,1,63,1,64,1,64,1,64,
        5,64,663,8,64,10,64,12,64,666,9,64,1,65,1,65,1,65,3,65,671,8,65,
        1,66,1,66,1,67,1,67,3,67,677,8,67,1,68,1,68,1,68,3,68,682,8,68,1,
        68,1,68,1,69,1,69,1,69,5,69,689,8,69,10,69,12,69,692,9,69,1,70,1,
        70,1,70,1,70,5,70,698,8,70,10,70,12,70,701,9,70,1,70,1,70,1,71,1,
        71,1,72,1,72,1,72,1,72,1,72,3,72,712,8,72,1,73,1,73,1,73,1,73,3,
        73,718,8,73,1,73,1,73,1,74,1,74,1,75,3,75,725,8,75,1,75,1,75,1,76,
        1,76,1,76,3,76,732,8,76,1,76,1,76,1,77,1,77,1,77,5,77,739,8,77,10,
        77,12,77,742,9,77,1,78,1,78,1,78,3,78,747,8,78,1,79,1,79,1,80,1,
        80,3,80,753,8,80,1,81,1,81,1,81,1,81,5,81,759,8,81,10,81,12,81,762,
        9,81,1,81,1,81,1,82,1,82,1,83,1,83,3,83,770,8,83,1,84,1,84,1,84,
        1,84,1,84,1,84,3,84,778,8,84,1,84,1,84,3,84,782,8,84,1,85,1,85,1,
        85,1,85,5,85,788,8,85,10,85,12,85,791,9,85,1,85,1,85,1,86,1,86,1,
        87,1,87,1,87,1,87,3,87,801,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,
        88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,5,88,817,8,88,10,88,12,88,
        820,9,88,1,88,1,88,3,88,824,8,88,3,88,826,8,88,1,89,1,89,1,90,1,
        90,1,91,1,91,1,92,1,92,1,92,3,92,837,8,92,1,93,1,93,3,93,841,8,93,
        1,93,1,93,1,93,1,94,1,94,3,94,848,8,94,1,95,1,95,1,96,1,96,1,96,
        0,0,97,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,
        122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
        154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,
        186,188,190,192,0,7,1,0,2,3,1,0,7,8,1,0,51,52,1,0,13,15,2,0,16,17,
        21,30,7,0,5,9,11,12,16,30,33,33,35,36,41,42,44,45,6,0,10,10,13,15,
        31,32,34,34,37,40,43,43,907,0,195,1,0,0,0,2,223,1,0,0,0,4,225,1,
        0,0,0,6,227,1,0,0,0,8,232,1,0,0,0,10,235,1,0,0,0,12,239,1,0,0,0,
        14,241,1,0,0,0,16,245,1,0,0,0,18,247,1,0,0,0,20,254,1,0,0,0,22,257,
        1,0,0,0,24,261,1,0,0,0,26,275,1,0,0,0,28,283,1,0,0,0,30,291,1,0,
        0,0,32,299,1,0,0,0,34,307,1,0,0,0,36,321,1,0,0,0,38,325,1,0,0,0,
        40,336,1,0,0,0,42,350,1,0,0,0,44,364,1,0,0,0,46,366,1,0,0,0,48,369,
        1,0,0,0,50,375,1,0,0,0,52,386,1,0,0,0,54,395,1,0,0,0,56,406,1,0,
        0,0,58,413,1,0,0,0,60,416,1,0,0,0,62,421,1,0,0,0,64,429,1,0,0,0,
        66,431,1,0,0,0,68,441,1,0,0,0,70,451,1,0,0,0,72,458,1,0,0,0,74,462,
        1,0,0,0,76,464,1,0,0,0,78,466,1,0,0,0,80,473,1,0,0,0,82,477,1,0,
        0,0,84,484,1,0,0,0,86,486,1,0,0,0,88,501,1,0,0,0,90,503,1,0,0,0,
        92,516,1,0,0,0,94,527,1,0,0,0,96,541,1,0,0,0,98,553,1,0,0,0,100,
        555,1,0,0,0,102,565,1,0,0,0,104,567,1,0,0,0,106,569,1,0,0,0,108,
        571,1,0,0,0,110,580,1,0,0,0,112,587,1,0,0,0,114,590,1,0,0,0,116,
        608,1,0,0,0,118,619,1,0,0,0,120,625,1,0,0,0,122,627,1,0,0,0,124,
        636,1,0,0,0,126,652,1,0,0,0,128,659,1,0,0,0,130,667,1,0,0,0,132,
        672,1,0,0,0,134,676,1,0,0,0,136,678,1,0,0,0,138,685,1,0,0,0,140,
        693,1,0,0,0,142,704,1,0,0,0,144,711,1,0,0,0,146,713,1,0,0,0,148,
        721,1,0,0,0,150,724,1,0,0,0,152,728,1,0,0,0,154,735,1,0,0,0,156,
        743,1,0,0,0,158,748,1,0,0,0,160,752,1,0,0,0,162,754,1,0,0,0,164,
        765,1,0,0,0,166,769,1,0,0,0,168,781,1,0,0,0,170,783,1,0,0,0,172,
        794,1,0,0,0,174,800,1,0,0,0,176,825,1,0,0,0,178,827,1,0,0,0,180,
        829,1,0,0,0,182,831,1,0,0,0,184,836,1,0,0,0,186,838,1,0,0,0,188,
        847,1,0,0,0,190,849,1,0,0,0,192,851,1,0,0,0,194,196,5,4,0,0,195,
        194,1,0,0,0,195,196,1,0,0,0,196,200,1,0,0,0,197,199,3,4,2,0,198,
        197,1,0,0,0,199,202,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,
        204,1,0,0,0,202,200,1,0,0,0,203,205,3,6,3,0,204,203,1,0,0,0,204,
        205,1,0,0,0,205,209,1,0,0,0,206,208,3,2,1,0,207,206,1,0,0,0,208,
        211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,
        209,1,0,0,0,212,213,5,0,0,1,213,1,1,0,0,0,214,224,3,18,9,0,215,224,
        3,14,7,0,216,224,3,48,24,0,217,224,3,92,46,0,218,224,3,140,70,0,
        219,224,3,162,81,0,220,224,3,170,85,0,221,224,3,12,6,0,222,224,3,
        4,2,0,223,214,1,0,0,0,223,215,1,0,0,0,223,216,1,0,0,0,223,217,1,
        0,0,0,223,218,1,0,0,0,223,219,1,0,0,0,223,220,1,0,0,0,223,221,1,
        0,0,0,223,222,1,0,0,0,224,3,1,0,0,0,225,226,7,0,0,0,226,5,1,0,0,
        0,227,228,5,5,0,0,228,229,5,56,0,0,229,230,3,8,4,0,230,231,5,51,
        0,0,231,7,1,0,0,0,232,233,3,10,5,0,233,9,1,0,0,0,234,236,5,50,0,
        0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,
        0,238,11,1,0,0,0,239,240,5,51,0,0,240,13,1,0,0,0,241,242,5,9,0,0,
        242,243,3,16,8,0,243,244,5,51,0,0,244,15,1,0,0,0,245,246,3,24,12,
        0,246,17,1,0,0,0,247,249,5,6,0,0,248,250,7,1,0,0,249,248,1,0,0,0,
        249,250,1,0,0,0,250,251,1,0,0,0,251,252,3,20,10,0,252,253,5,51,0,
        0,253,19,1,0,0,0,254,255,3,10,5,0,255,21,1,0,0,0,256,258,5,53,0,
        0,257,256,1,0,0,0,257,258,1,0,0,0,258,259,1,0,0,0,259,260,3,24,12,
        0,260,23,1,0,0,0,261,266,3,188,94,0,262,263,5,53,0,0,263,265,3,188,
        94,0,264,262,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,
        0,0,267,25,1,0,0,0,268,266,1,0,0,0,269,272,3,36,18,0,270,271,5,53,
        0,0,271,273,3,24,12,0,272,270,1,0,0,0,272,273,1,0,0,0,273,276,1,
        0,0,0,274,276,3,46,23,0,275,269,1,0,0,0,275,274,1,0,0,0,276,27,1,
        0,0,0,277,280,3,38,19,0,278,279,5,53,0,0,279,281,3,24,12,0,280,278,
        1,0,0,0,280,281,1,0,0,0,281,284,1,0,0,0,282,284,3,46,23,0,283,277,
        1,0,0,0,283,282,1,0,0,0,284,29,1,0,0,0,285,288,3,40,20,0,286,287,
        5,53,0,0,287,289,3,24,12,0,288,286,1,0,0,0,288,289,1,0,0,0,289,292,
        1,0,0,0,290,292,3,46,23,0,291,285,1,0,0,0,291,290,1,0,0,0,292,31,
        1,0,0,0,293,296,3,42,21,0,294,295,5,53,0,0,295,297,3,24,12,0,296,
        294,1,0,0,0,296,297,1,0,0,0,297,300,1,0,0,0,298,300,3,46,23,0,299,
        293,1,0,0,0,299,298,1,0,0,0,300,33,1,0,0,0,301,304,3,44,22,0,302,
        303,5,53,0,0,303,305,3,24,12,0,304,302,1,0,0,0,304,305,1,0,0,0,305,
        308,1,0,0,0,306,308,3,46,23,0,307,301,1,0,0,0,307,306,1,0,0,0,308,
        35,1,0,0,0,309,322,3,190,95,0,310,322,5,39,0,0,311,322,5,38,0,0,
        312,322,5,32,0,0,313,322,5,37,0,0,314,322,5,34,0,0,315,322,5,40,
        0,0,316,322,5,10,0,0,317,322,5,14,0,0,318,322,5,15,0,0,319,322,5,
        13,0,0,320,322,5,43,0,0,321,309,1,0,0,0,321,310,1,0,0,0,321,311,
        1,0,0,0,321,312,1,0,0,0,321,313,1,0,0,0,321,314,1,0,0,0,321,315,
        1,0,0,0,321,316,1,0,0,0,321,317,1,0,0,0,321,318,1,0,0,0,321,319,
        1,0,0,0,321,320,1,0,0,0,322,37,1,0,0,0,323,326,3,190,95,0,324,326,
        5,43,0,0,325,323,1,0,0,0,325,324,1,0,0,0,326,39,1,0,0,0,327,337,
        3,190,95,0,328,337,5,39,0,0,329,337,5,38,0,0,330,337,5,32,0,0,331,
        337,5,37,0,0,332,337,5,34,0,0,333,337,5,40,0,0,334,337,5,10,0,0,
        335,337,5,43,0,0,336,327,1,0,0,0,336,328,1,0,0,0,336,329,1,0,0,0,
        336,330,1,0,0,0,336,331,1,0,0,0,336,332,1,0,0,0,336,333,1,0,0,0,
        336,334,1,0,0,0,336,335,1,0,0,0,337,41,1,0,0,0,338,351,3,190,95,
        0,339,351,5,39,0,0,340,351,5,38,0,0,341,351,5,32,0,0,342,351,5,37,
        0,0,343,351,5,34,0,0,344,351,5,40,0,0,345,351,5,10,0,0,346,351,5,
        14,0,0,347,351,5,15,0,0,348,351,5,13,0,0,349,351,5,31,0,0,350,338,
        1,0,0,0,350,339,1,0,0,0,350,340,1,0,0,0,350,341,1,0,0,0,350,342,
        1,0,0,0,350,343,1,0,0,0,350,344,1,0,0,0,350,345,1,0,0,0,350,346,
        1,0,0,0,350,347,1,0,0,0,350,348,1,0,0,0,350,349,1,0,0,0,351,43,1,
        0,0,0,352,365,3,190,95,0,353,365,5,39,0,0,354,365,5,38,0,0,355,365,
        5,32,0,0,356,365,5,37,0,0,357,365,5,34,0,0,358,365,5,40,0,0,359,
        365,5,10,0,0,360,365,5,14,0,0,361,365,5,15,0,0,362,365,5,13,0,0,
        363,365,5,31,0,0,364,352,1,0,0,0,364,353,1,0,0,0,364,354,1,0,0,0,
        364,355,1,0,0,0,364,356,1,0,0,0,364,357,1,0,0,0,364,358,1,0,0,0,
        364,359,1,0,0,0,364,360,1,0,0,0,364,361,1,0,0,0,364,362,1,0,0,0,
        364,363,1,0,0,0,365,45,1,0,0,0,366,367,5,53,0,0,367,368,3,24,12,
        0,368,47,1,0,0,0,369,370,5,10,0,0,370,371,3,54,27,0,371,372,5,56,
        0,0,372,373,3,56,28,0,373,374,5,51,0,0,374,49,1,0,0,0,375,376,5,
        63,0,0,376,381,3,52,26,0,377,378,5,52,0,0,378,380,3,52,26,0,379,
        377,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,
        384,1,0,0,0,383,381,1,0,0,0,384,385,5,64,0,0,385,51,1,0,0,0,386,
        387,3,54,27,0,387,388,5,56,0,0,388,389,3,56,28,0,389,53,1,0,0,0,
        390,396,3,188,94,0,391,392,5,59,0,0,392,393,3,22,11,0,393,394,5,
        60,0,0,394,396,1,0,0,0,395,390,1,0,0,0,395,391,1,0,0,0,396,401,1,
        0,0,0,397,398,5,53,0,0,398,400,3,54,27,0,399,397,1,0,0,0,400,403,
        1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,55,1,0,0,0,403,401,1,
        0,0,0,404,407,3,58,29,0,405,407,3,66,33,0,406,404,1,0,0,0,406,405,
        1,0,0,0,407,57,1,0,0,0,408,414,3,10,5,0,409,414,3,60,30,0,410,414,
        3,62,31,0,411,414,3,64,32,0,412,414,3,188,94,0,413,408,1,0,0,0,413,
        409,1,0,0,0,413,410,1,0,0,0,413,411,1,0,0,0,413,412,1,0,0,0,414,
        59,1,0,0,0,415,417,5,57,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,
        418,1,0,0,0,418,419,5,46,0,0,419,61,1,0,0,0,420,422,5,57,0,0,421,
        420,1,0,0,0,421,422,1,0,0,0,422,423,1,0,0,0,423,424,5,47,0,0,424,
        63,1,0,0,0,425,426,5,57,0,0,426,430,5,11,0,0,427,428,5,57,0,0,428,
        430,5,12,0,0,429,425,1,0,0,0,429,427,1,0,0,0,430,65,1,0,0,0,431,
        432,5,61,0,0,432,433,3,68,34,0,433,434,5,62,0,0,434,67,1,0,0,0,435,
        437,3,70,35,0,436,438,7,2,0,0,437,436,1,0,0,0,437,438,1,0,0,0,438,
        440,1,0,0,0,439,435,1,0,0,0,440,443,1,0,0,0,441,439,1,0,0,0,441,
        442,1,0,0,0,442,69,1,0,0,0,443,441,1,0,0,0,444,445,3,72,36,0,445,
        446,5,55,0,0,446,447,3,80,40,0,447,452,1,0,0,0,448,449,3,72,36,0,
        449,450,3,82,41,0,450,452,1,0,0,0,451,444,1,0,0,0,451,448,1,0,0,
        0,452,71,1,0,0,0,453,459,3,104,52,0,454,455,5,63,0,0,455,456,3,74,
        37,0,456,457,5,64,0,0,457,459,1,0,0,0,458,453,1,0,0,0,458,454,1,
        0,0,0,459,73,1,0,0,0,460,463,3,76,38,0,461,463,3,78,39,0,462,460,
        1,0,0,0,462,461,1,0,0,0,463,75,1,0,0,0,464,465,3,24,12,0,465,77,
        1,0,0,0,466,467,3,24,12,0,467,468,5,54,0,0,468,469,3,24,12,0,469,
        79,1,0,0,0,470,474,3,58,29,0,471,474,3,84,42,0,472,474,3,86,43,0,
        473,470,1,0,0,0,473,471,1,0,0,0,473,472,1,0,0,0,474,81,1,0,0,0,475,
        478,3,84,42,0,476,478,3,90,45,0,477,475,1,0,0,0,477,476,1,0,0,0,
        478,83,1,0,0,0,479,485,3,66,33,0,480,481,5,65,0,0,481,482,3,68,34,
        0,482,483,5,66,0,0,483,485,1,0,0,0,484,479,1,0,0,0,484,480,1,0,0,
        0,485,85,1,0,0,0,486,495,5,63,0,0,487,492,3,88,44,0,488,489,5,52,
        0,0,489,491,3,88,44,0,490,488,1,0,0,0,491,494,1,0,0,0,492,490,1,
        0,0,0,492,493,1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,0,495,487,1,
        0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,498,5,64,0,0,498,87,1,
        0,0,0,499,502,3,58,29,0,500,502,3,84,42,0,501,499,1,0,0,0,501,500,
        1,0,0,0,502,89,1,0,0,0,503,512,5,63,0,0,504,509,3,84,42,0,505,506,
        5,52,0,0,506,508,3,84,42,0,507,505,1,0,0,0,508,511,1,0,0,0,509,507,
        1,0,0,0,509,510,1,0,0,0,510,513,1,0,0,0,511,509,1,0,0,0,512,504,
        1,0,0,0,512,513,1,0,0,0,513,514,1,0,0,0,514,515,5,64,0,0,515,91,
        1,0,0,0,516,517,5,39,0,0,517,518,3,94,47,0,518,522,5,61,0,0,519,
        521,3,96,48,0,520,519,1,0,0,0,521,524,1,0,0,0,522,520,1,0,0,0,522,
        523,1,0,0,0,523,525,1,0,0,0,524,522,1,0,0,0,525,526,5,62,0,0,526,
        93,1,0,0,0,527,528,3,188,94,0,528,95,1,0,0,0,529,542,3,98,49,0,530,
        542,3,114,57,0,531,542,3,116,58,0,532,542,3,48,24,0,533,542,3,126,
        63,0,534,542,3,136,68,0,535,542,3,92,46,0,536,542,3,140,70,0,537,
        542,3,162,81,0,538,542,3,108,54,0,539,542,3,12,6,0,540,542,3,4,2,
        0,541,529,1,0,0,0,541,530,1,0,0,0,541,531,1,0,0,0,541,532,1,0,0,
        0,541,533,1,0,0,0,541,534,1,0,0,0,541,535,1,0,0,0,541,536,1,0,0,
        0,541,537,1,0,0,0,541,538,1,0,0,0,541,539,1,0,0,0,541,540,1,0,0,
        0,542,97,1,0,0,0,543,554,3,100,50,0,544,545,3,28,14,0,545,546,3,
        104,52,0,546,547,5,56,0,0,547,549,3,106,53,0,548,550,3,50,25,0,549,
        548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,552,5,51,0,0,552,
        554,1,0,0,0,553,543,1,0,0,0,553,544,1,0,0,0,554,99,1,0,0,0,555,556,
        3,102,51,0,556,557,3,26,13,0,557,558,3,104,52,0,558,559,5,56,0,0,
        559,561,3,106,53,0,560,562,3,50,25,0,561,560,1,0,0,0,561,562,1,0,
        0,0,562,563,1,0,0,0,563,564,5,51,0,0,564,101,1,0,0,0,565,566,7,3,
        0,0,566,103,1,0,0,0,567,568,3,188,94,0,568,105,1,0,0,0,569,570,5,
        46,0,0,570,107,1,0,0,0,571,572,3,110,55,0,572,573,3,104,52,0,573,
        574,5,56,0,0,574,576,3,106,53,0,575,577,3,50,25,0,576,575,1,0,0,
        0,576,577,1,0,0,0,577,578,1,0,0,0,578,579,5,51,0,0,579,109,1,0,0,
        0,580,581,5,33,0,0,581,582,5,65,0,0,582,583,3,112,56,0,583,584,5,
        52,0,0,584,585,3,22,11,0,585,586,5,66,0,0,586,111,1,0,0,0,587,588,
        7,4,0,0,588,113,1,0,0,0,589,591,3,102,51,0,590,589,1,0,0,0,590,591,
        1,0,0,0,591,592,1,0,0,0,592,593,5,31,0,0,593,594,3,104,52,0,594,
        595,5,56,0,0,595,597,3,106,53,0,596,598,3,50,25,0,597,596,1,0,0,
        0,597,598,1,0,0,0,598,599,1,0,0,0,599,603,5,61,0,0,600,602,3,96,
        48,0,601,600,1,0,0,0,602,605,1,0,0,0,603,601,1,0,0,0,603,604,1,0,
        0,0,604,606,1,0,0,0,605,603,1,0,0,0,606,607,5,62,0,0,607,115,1,0,
        0,0,608,609,5,32,0,0,609,610,3,118,59,0,610,614,5,61,0,0,611,613,
        3,120,60,0,612,611,1,0,0,0,613,616,1,0,0,0,614,612,1,0,0,0,614,615,
        1,0,0,0,615,617,1,0,0,0,616,614,1,0,0,0,617,618,5,62,0,0,618,117,
        1,0,0,0,619,620,3,188,94,0,620,119,1,0,0,0,621,626,3,48,24,0,622,
        626,3,122,61,0,623,626,3,124,62,0,624,626,3,4,2,0,625,621,1,0,0,
        0,625,622,1,0,0,0,625,623,1,0,0,0,625,624,1,0,0,0,626,121,1,0,0,
        0,627,628,3,32,16,0,628,629,3,104,52,0,629,630,5,56,0,0,630,632,
        3,106,53,0,631,633,3,50,25,0,632,631,1,0,0,0,632,633,1,0,0,0,633,
        634,1,0,0,0,634,635,5,51,0,0,635,123,1,0,0,0,636,637,5,31,0,0,637,
        638,3,104,52,0,638,639,5,56,0,0,639,641,3,106,53,0,640,642,3,50,
        25,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,647,5,61,
        0,0,644,646,3,96,48,0,645,644,1,0,0,0,646,649,1,0,0,0,647,645,1,
        0,0,0,647,648,1,0,0,0,648,650,1,0,0,0,649,647,1,0,0,0,650,651,5,
        62,0,0,651,125,1,0,0,0,652,653,5,34,0,0,653,655,3,128,64,0,654,656,
        3,50,25,0,655,654,1,0,0,0,655,656,1,0,0,0,656,657,1,0,0,0,657,658,
        5,51,0,0,658,127,1,0,0,0,659,664,3,130,65,0,660,661,5,52,0,0,661,
        663,3,130,65,0,662,660,1,0,0,0,663,666,1,0,0,0,664,662,1,0,0,0,664,
        665,1,0,0,0,665,129,1,0,0,0,666,664,1,0,0,0,667,670,3,132,66,0,668,
        669,5,35,0,0,669,671,3,134,67,0,670,668,1,0,0,0,670,671,1,0,0,0,
        671,131,1,0,0,0,672,673,3,106,53,0,673,133,1,0,0,0,674,677,3,106,
        53,0,675,677,5,36,0,0,676,674,1,0,0,0,676,675,1,0,0,0,677,135,1,
        0,0,0,678,681,5,37,0,0,679,682,3,128,64,0,680,682,3,138,69,0,681,
        679,1,0,0,0,681,680,1,0,0,0,682,683,1,0,0,0,683,684,5,51,0,0,684,
        137,1,0,0,0,685,690,3,10,5,0,686,687,5,52,0,0,687,689,3,10,5,0,688,
        686,1,0,0,0,689,692,1,0,0,0,690,688,1,0,0,0,690,691,1,0,0,0,691,
        139,1,0,0,0,692,690,1,0,0,0,693,694,5,38,0,0,694,695,3,142,71,0,
        695,699,5,61,0,0,696,698,3,144,72,0,697,696,1,0,0,0,698,701,1,0,
        0,0,699,697,1,0,0,0,699,700,1,0,0,0,700,702,1,0,0,0,701,699,1,0,
        0,0,702,703,5,62,0,0,703,141,1,0,0,0,704,705,3,188,94,0,705,143,
        1,0,0,0,706,712,3,48,24,0,707,712,3,146,73,0,708,712,3,152,76,0,
        709,712,3,12,6,0,710,712,3,4,2,0,711,706,1,0,0,0,711,707,1,0,0,0,
        711,708,1,0,0,0,711,709,1,0,0,0,711,710,1,0,0,0,712,145,1,0,0,0,
        713,714,3,148,74,0,714,715,5,56,0,0,715,717,3,150,75,0,716,718,3,
        50,25,0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,720,
        5,51,0,0,720,147,1,0,0,0,721,722,3,188,94,0,722,149,1,0,0,0,723,
        725,5,57,0,0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,
        727,5,46,0,0,727,151,1,0,0,0,728,731,5,37,0,0,729,732,3,154,77,0,
        730,732,3,138,69,0,731,729,1,0,0,0,731,730,1,0,0,0,732,733,1,0,0,
        0,733,734,5,51,0,0,734,153,1,0,0,0,735,740,3,156,78,0,736,737,5,
        52,0,0,737,739,3,156,78,0,738,736,1,0,0,0,739,742,1,0,0,0,740,738,
        1,0,0,0,740,741,1,0,0,0,741,155,1,0,0,0,742,740,1,0,0,0,743,746,
        3,158,79,0,744,745,5,35,0,0,745,747,3,160,80,0,746,744,1,0,0,0,746,
        747,1,0,0,0,747,157,1,0,0,0,748,749,3,150,75,0,749,159,1,0,0,0,750,
        753,3,150,75,0,751,753,5,36,0,0,752,750,1,0,0,0,752,751,1,0,0,0,
        753,161,1,0,0,0,754,755,5,40,0,0,755,756,3,164,82,0,756,760,5,61,
        0,0,757,759,3,166,83,0,758,757,1,0,0,0,759,762,1,0,0,0,760,758,1,
        0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,762,760,1,0,0,0,763,764,5,
        62,0,0,764,163,1,0,0,0,765,766,3,22,11,0,766,165,1,0,0,0,767,770,
        3,168,84,0,768,770,3,114,57,0,769,767,1,0,0,0,769,768,1,0,0,0,770,
        167,1,0,0,0,771,782,3,100,50,0,772,773,3,30,15,0,773,774,3,104,52,
        0,774,775,5,56,0,0,775,777,3,106,53,0,776,778,3,50,25,0,777,776,
        1,0,0,0,777,778,1,0,0,0,778,779,1,0,0,0,779,780,5,51,0,0,780,782,
        1,0,0,0,781,771,1,0,0,0,781,772,1,0,0,0,782,169,1,0,0,0,783,784,
        5,41,0,0,784,785,3,172,86,0,785,789,5,61,0,0,786,788,3,174,87,0,
        787,786,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,1,0,0,0,
        790,792,1,0,0,0,791,789,1,0,0,0,792,793,5,62,0,0,793,171,1,0,0,0,
        794,795,3,188,94,0,795,173,1,0,0,0,796,801,3,48,24,0,797,801,3,4,
        2,0,798,801,3,176,88,0,799,801,3,12,6,0,800,796,1,0,0,0,800,797,
        1,0,0,0,800,798,1,0,0,0,800,799,1,0,0,0,801,175,1,0,0,0,802,803,
        5,42,0,0,803,804,3,178,89,0,804,805,3,180,90,0,805,806,5,44,0,0,
        806,807,3,182,91,0,807,808,5,51,0,0,808,826,1,0,0,0,809,810,5,42,
        0,0,810,811,3,178,89,0,811,812,3,180,90,0,812,813,5,44,0,0,813,814,
        3,182,91,0,814,818,5,61,0,0,815,817,3,184,92,0,816,815,1,0,0,0,817,
        820,1,0,0,0,818,816,1,0,0,0,818,819,1,0,0,0,819,821,1,0,0,0,820,
        818,1,0,0,0,821,823,5,62,0,0,822,824,5,51,0,0,823,822,1,0,0,0,823,
        824,1,0,0,0,824,826,1,0,0,0,825,802,1,0,0,0,825,809,1,0,0,0,826,
        177,1,0,0,0,827,828,3,188,94,0,828,179,1,0,0,0,829,830,3,186,93,
        0,830,181,1,0,0,0,831,832,3,186,93,0,832,183,1,0,0,0,833,837,3,48,
        24,0,834,837,3,4,2,0,835,837,3,12,6,0,836,833,1,0,0,0,836,834,1,
        0,0,0,836,835,1,0,0,0,837,185,1,0,0,0,838,840,5,59,0,0,839,841,5,
        43,0,0,840,839,1,0,0,0,840,841,1,0,0,0,841,842,1,0,0,0,842,843,3,
        34,17,0,843,844,5,60,0,0,844,187,1,0,0,0,845,848,3,190,95,0,846,
        848,3,192,96,0,847,845,1,0,0,0,847,846,1,0,0,0,848,189,1,0,0,0,849,
        850,7,5,0,0,850,191,1,0,0,0,851,852,7,6,0,0,852,193,1,0,0,0,85,195,
        200,204,209,223,237,249,257,266,272,275,280,283,288,291,296,299,
        304,307,321,325,336,350,364,381,395,401,406,413,416,421,429,437,
        441,451,458,462,473,477,484,492,495,501,509,512,522,541,549,553,
        561,576,590,597,603,614,625,632,641,647,655,664,670,676,681,690,
        699,711,717,724,731,740,746,752,760,769,777,781,789,800,818,823,
        825,836,840,847
    ]

class ProtobufParser ( Parser ):

    grammarFileName = "ProtobufParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'\\uFEFF'", "'syntax'", "'import'", "'weak'", "'public'", 
                     "'package'", "'option'", "'inf'", "'nan'", "'repeated'", 
                     "'optional'", "'required'", "'bool'", "'string'", "'bytes'", 
                     "'float'", "'double'", "'int32'", "'int64'", "'uint32'", 
                     "'uint64'", "'sint32'", "'sint64'", "'fixed32'", "'fixed64'", 
                     "'sfixed32'", "'sfixed64'", "'group'", "'oneof'", "'map'", 
                     "'extensions'", "'to'", "'max'", "'reserved'", "'enum'", 
                     "'message'", "'extend'", "'service'", "'rpc'", "'stream'", 
                     "'returns'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "';'", "','", 
                     "'.'", "'/'", "':'", "'='", "'-'", "'+'", "'('", "')'", 
                     "'{'", "'}'", "'['", "']'", "'<'", "'>'" ]

    symbolicNames = [ "<INVALID>", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
                      "BYTE_ORDER_MARK", "SYNTAX", "IMPORT", "WEAK", "PUBLIC", 
                      "PACKAGE", "OPTION", "INF", "NAN", "REPEATED", "OPTIONAL", 
                      "REQUIRED", "BOOL", "STRING", "BYTES", "FLOAT", "DOUBLE", 
                      "INT32", "INT64", "UINT32", "UINT64", "SINT32", "SINT64", 
                      "FIXED32", "FIXED64", "SFIXED32", "SFIXED64", "GROUP", 
                      "ONEOF", "MAP", "EXTENSIONS", "TO", "MAX", "RESERVED", 
                      "ENUM", "MESSAGE", "EXTEND", "SERVICE", "RPC", "STREAM", 
                      "RETURNS", "IDENTIFIER", "INT_LITERAL", "FLOAT_LITERAL", 
                      "INVALID_INT_LITERAL", "INVALID_FLOAT_LITERAL", "STRING_LITERAL", 
                      "SEMICOLON", "COMMA", "DOT", "SLASH", "COLON", "EQUALS", 
                      "MINUS", "PLUS", "L_PAREN", "R_PAREN", "L_BRACE", 
                      "R_BRACE", "L_BRACKET", "R_BRACKET", "L_ANGLE", "R_ANGLE" ]

    RULE_file = 0
    RULE_fileElement = 1
    RULE_commentDecl = 2
    RULE_syntaxDecl = 3
    RULE_syntaxLevel = 4
    RULE_stringLiteral = 5
    RULE_emptyDecl = 6
    RULE_packageDecl = 7
    RULE_packageName = 8
    RULE_importDecl = 9
    RULE_importedFileName = 10
    RULE_typeName = 11
    RULE_qualifiedIdentifier = 12
    RULE_fieldDeclTypeName = 13
    RULE_messageFieldDeclTypeName = 14
    RULE_extensionFieldDeclTypeName = 15
    RULE_oneofFieldDeclTypeName = 16
    RULE_methodDeclTypeName = 17
    RULE_fieldDeclIdentifier = 18
    RULE_messageFieldDeclIdentifier = 19
    RULE_extensionFieldDeclIdentifier = 20
    RULE_oneofFieldDeclIdentifier = 21
    RULE_methodDeclIdentifier = 22
    RULE_fullyQualifiedIdentifier = 23
    RULE_optionDecl = 24
    RULE_compactOptions = 25
    RULE_compactOption = 26
    RULE_optionName = 27
    RULE_optionValue = 28
    RULE_scalarValue = 29
    RULE_intLiteral = 30
    RULE_floatLiteral = 31
    RULE_specialFloatLiteral = 32
    RULE_messageLiteralWithBraces = 33
    RULE_messageTextFormat = 34
    RULE_messageLiteralField = 35
    RULE_messageLiteralFieldName = 36
    RULE_specialFieldName = 37
    RULE_extensionFieldName = 38
    RULE_typeURL = 39
    RULE_value = 40
    RULE_messageValue = 41
    RULE_messageLiteral = 42
    RULE_listLiteral = 43
    RULE_listElement = 44
    RULE_listOfMessagesLiteral = 45
    RULE_messageDecl = 46
    RULE_messageName = 47
    RULE_messageElement = 48
    RULE_messageFieldDecl = 49
    RULE_fieldDeclWithCardinality = 50
    RULE_fieldCardinality = 51
    RULE_fieldName = 52
    RULE_fieldNumber = 53
    RULE_mapFieldDecl = 54
    RULE_mapType = 55
    RULE_mapKeyType = 56
    RULE_groupDecl = 57
    RULE_oneofDecl = 58
    RULE_oneofName = 59
    RULE_oneofElement = 60
    RULE_oneofFieldDecl = 61
    RULE_oneofGroupDecl = 62
    RULE_extensionRangeDecl = 63
    RULE_tagRanges = 64
    RULE_tagRange = 65
    RULE_tagRangeStart = 66
    RULE_tagRangeEnd = 67
    RULE_messageReservedDecl = 68
    RULE_names = 69
    RULE_enumDecl = 70
    RULE_enumName = 71
    RULE_enumElement = 72
    RULE_enumValueDecl = 73
    RULE_enumValueName = 74
    RULE_enumValueNumber = 75
    RULE_enumReservedDecl = 76
    RULE_enumValueRanges = 77
    RULE_enumValueRange = 78
    RULE_enumValueRangeStart = 79
    RULE_enumValueRangeEnd = 80
    RULE_extensionDecl = 81
    RULE_extendedMessage = 82
    RULE_extensionElement = 83
    RULE_extensionFieldDecl = 84
    RULE_serviceDecl = 85
    RULE_serviceName = 86
    RULE_serviceElement = 87
    RULE_methodDecl = 88
    RULE_methodName = 89
    RULE_inputType = 90
    RULE_outputType = 91
    RULE_methodElement = 92
    RULE_messageType = 93
    RULE_identifier = 94
    RULE_alwaysIdent = 95
    RULE_sometimesIdent = 96

    ruleNames =  [ "file", "fileElement", "commentDecl", "syntaxDecl", "syntaxLevel", 
                   "stringLiteral", "emptyDecl", "packageDecl", "packageName", 
                   "importDecl", "importedFileName", "typeName", "qualifiedIdentifier", 
                   "fieldDeclTypeName", "messageFieldDeclTypeName", "extensionFieldDeclTypeName", 
                   "oneofFieldDeclTypeName", "methodDeclTypeName", "fieldDeclIdentifier", 
                   "messageFieldDeclIdentifier", "extensionFieldDeclIdentifier", 
                   "oneofFieldDeclIdentifier", "methodDeclIdentifier", "fullyQualifiedIdentifier", 
                   "optionDecl", "compactOptions", "compactOption", "optionName", 
                   "optionValue", "scalarValue", "intLiteral", "floatLiteral", 
                   "specialFloatLiteral", "messageLiteralWithBraces", "messageTextFormat", 
                   "messageLiteralField", "messageLiteralFieldName", "specialFieldName", 
                   "extensionFieldName", "typeURL", "value", "messageValue", 
                   "messageLiteral", "listLiteral", "listElement", "listOfMessagesLiteral", 
                   "messageDecl", "messageName", "messageElement", "messageFieldDecl", 
                   "fieldDeclWithCardinality", "fieldCardinality", "fieldName", 
                   "fieldNumber", "mapFieldDecl", "mapType", "mapKeyType", 
                   "groupDecl", "oneofDecl", "oneofName", "oneofElement", 
                   "oneofFieldDecl", "oneofGroupDecl", "extensionRangeDecl", 
                   "tagRanges", "tagRange", "tagRangeStart", "tagRangeEnd", 
                   "messageReservedDecl", "names", "enumDecl", "enumName", 
                   "enumElement", "enumValueDecl", "enumValueName", "enumValueNumber", 
                   "enumReservedDecl", "enumValueRanges", "enumValueRange", 
                   "enumValueRangeStart", "enumValueRangeEnd", "extensionDecl", 
                   "extendedMessage", "extensionElement", "extensionFieldDecl", 
                   "serviceDecl", "serviceName", "serviceElement", "methodDecl", 
                   "methodName", "inputType", "outputType", "methodElement", 
                   "messageType", "identifier", "alwaysIdent", "sometimesIdent" ]

    EOF = Token.EOF
    WS=1
    LINE_COMMENT=2
    BLOCK_COMMENT=3
    BYTE_ORDER_MARK=4
    SYNTAX=5
    IMPORT=6
    WEAK=7
    PUBLIC=8
    PACKAGE=9
    OPTION=10
    INF=11
    NAN=12
    REPEATED=13
    OPTIONAL=14
    REQUIRED=15
    BOOL=16
    STRING=17
    BYTES=18
    FLOAT=19
    DOUBLE=20
    INT32=21
    INT64=22
    UINT32=23
    UINT64=24
    SINT32=25
    SINT64=26
    FIXED32=27
    FIXED64=28
    SFIXED32=29
    SFIXED64=30
    GROUP=31
    ONEOF=32
    MAP=33
    EXTENSIONS=34
    TO=35
    MAX=36
    RESERVED=37
    ENUM=38
    MESSAGE=39
    EXTEND=40
    SERVICE=41
    RPC=42
    STREAM=43
    RETURNS=44
    IDENTIFIER=45
    INT_LITERAL=46
    FLOAT_LITERAL=47
    INVALID_INT_LITERAL=48
    INVALID_FLOAT_LITERAL=49
    STRING_LITERAL=50
    SEMICOLON=51
    COMMA=52
    DOT=53
    SLASH=54
    COLON=55
    EQUALS=56
    MINUS=57
    PLUS=58
    L_PAREN=59
    R_PAREN=60
    L_BRACE=61
    R_BRACE=62
    L_BRACKET=63
    R_BRACKET=64
    L_ANGLE=65
    R_ANGLE=66

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class FileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(ProtobufParser.EOF, 0)

        def BYTE_ORDER_MARK(self):
            return self.getToken(ProtobufParser.BYTE_ORDER_MARK, 0)

        def commentDecl(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.CommentDeclContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,i)


        def syntaxDecl(self):
            return self.getTypedRuleContext(ProtobufParser.SyntaxDeclContext,0)


        def fileElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.FileElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.FileElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_file

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile" ):
                listener.enterFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile" ):
                listener.exitFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile" ):
                return visitor.visitFile(self)
            else:
                return visitor.visitChildren(self)




    def file_(self):

        localctx = ProtobufParser.FileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==4:
                self.state = 194
                self.match(ProtobufParser.BYTE_ORDER_MARK)


            self.state = 200
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 197
                    self.commentDecl() 
                self.state = 202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==5:
                self.state = 203
                self.syntaxDecl()


            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2255922982291020) != 0):
                self.state = 206
                self.fileElement()
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 212
            self.match(ProtobufParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ImportDeclContext,0)


        def packageDecl(self):
            return self.getTypedRuleContext(ProtobufParser.PackageDeclContext,0)


        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def messageDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MessageDeclContext,0)


        def enumDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EnumDeclContext,0)


        def extensionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionDeclContext,0)


        def serviceDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ServiceDeclContext,0)


        def emptyDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EmptyDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_fileElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileElement" ):
                listener.enterFileElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileElement" ):
                listener.exitFileElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileElement" ):
                return visitor.visitFileElement(self)
            else:
                return visitor.visitChildren(self)




    def fileElement(self):

        localctx = ProtobufParser.FileElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_fileElement)
        try:
            self.state = 223
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 214
                self.importDecl()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 2)
                self.state = 215
                self.packageDecl()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 216
                self.optionDecl()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 4)
                self.state = 217
                self.messageDecl()
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 5)
                self.state = 218
                self.enumDecl()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 6)
                self.state = 219
                self.extensionDecl()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 7)
                self.state = 220
                self.serviceDecl()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 8)
                self.state = 221
                self.emptyDecl()
                pass
            elif token in [2, 3]:
                self.enterOuterAlt(localctx, 9)
                self.state = 222
                self.commentDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_COMMENT(self):
            return self.getToken(ProtobufParser.LINE_COMMENT, 0)

        def BLOCK_COMMENT(self):
            return self.getToken(ProtobufParser.BLOCK_COMMENT, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_commentDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentDecl" ):
                listener.enterCommentDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentDecl" ):
                listener.exitCommentDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommentDecl" ):
                return visitor.visitCommentDecl(self)
            else:
                return visitor.visitChildren(self)




    def commentDecl(self):

        localctx = ProtobufParser.CommentDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_commentDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            _la = self._input.LA(1)
            if not(_la==2 or _la==3):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyntaxDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SYNTAX(self):
            return self.getToken(ProtobufParser.SYNTAX, 0)

        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def syntaxLevel(self):
            return self.getTypedRuleContext(ProtobufParser.SyntaxLevelContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_syntaxDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyntaxDecl" ):
                listener.enterSyntaxDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyntaxDecl" ):
                listener.exitSyntaxDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSyntaxDecl" ):
                return visitor.visitSyntaxDecl(self)
            else:
                return visitor.visitChildren(self)




    def syntaxDecl(self):

        localctx = ProtobufParser.SyntaxDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_syntaxDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(ProtobufParser.SYNTAX)
            self.state = 228
            self.match(ProtobufParser.EQUALS)
            self.state = 229
            self.syntaxLevel()
            self.state = 230
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SyntaxLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_syntaxLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSyntaxLevel" ):
                listener.enterSyntaxLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSyntaxLevel" ):
                listener.exitSyntaxLevel(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSyntaxLevel" ):
                return visitor.visitSyntaxLevel(self)
            else:
                return visitor.visitChildren(self)




    def syntaxLevel(self):

        localctx = ProtobufParser.SyntaxLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_syntaxLevel)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.STRING_LITERAL)
            else:
                return self.getToken(ProtobufParser.STRING_LITERAL, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = ProtobufParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 234
                self.match(ProtobufParser.STRING_LITERAL)
                self.state = 237 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==50):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_emptyDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyDecl" ):
                listener.enterEmptyDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyDecl" ):
                listener.exitEmptyDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyDecl" ):
                return visitor.visitEmptyDecl(self)
            else:
                return visitor.visitChildren(self)




    def emptyDecl(self):

        localctx = ProtobufParser.EmptyDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_emptyDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(ProtobufParser.PACKAGE, 0)

        def packageName(self):
            return self.getTypedRuleContext(ProtobufParser.PackageNameContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_packageDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageDecl" ):
                listener.enterPackageDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageDecl" ):
                listener.exitPackageDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageDecl" ):
                return visitor.visitPackageDecl(self)
            else:
                return visitor.visitChildren(self)




    def packageDecl(self):

        localctx = ProtobufParser.PackageDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_packageDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 241
            self.match(ProtobufParser.PACKAGE)
            self.state = 242
            self.packageName()
            self.state = 243
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_packageName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageName" ):
                listener.enterPackageName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageName" ):
                listener.exitPackageName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageName" ):
                return visitor.visitPackageName(self)
            else:
                return visitor.visitChildren(self)




    def packageName(self):

        localctx = ProtobufParser.PackageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_packageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(ProtobufParser.IMPORT, 0)

        def importedFileName(self):
            return self.getTypedRuleContext(ProtobufParser.ImportedFileNameContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def WEAK(self):
            return self.getToken(ProtobufParser.WEAK, 0)

        def PUBLIC(self):
            return self.getToken(ProtobufParser.PUBLIC, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_importDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDecl" ):
                listener.enterImportDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDecl" ):
                listener.exitImportDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDecl" ):
                return visitor.visitImportDecl(self)
            else:
                return visitor.visitChildren(self)




    def importDecl(self):

        localctx = ProtobufParser.ImportDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_importDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(ProtobufParser.IMPORT)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==7 or _la==8:
                self.state = 248
                _la = self._input.LA(1)
                if not(_la==7 or _la==8):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 251
            self.importedFileName()
            self.state = 252
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportedFileNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.StringLiteralContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_importedFileName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportedFileName" ):
                listener.enterImportedFileName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportedFileName" ):
                listener.exitImportedFileName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportedFileName" ):
                return visitor.visitImportedFileName(self)
            else:
                return visitor.visitChildren(self)




    def importedFileName(self):

        localctx = ProtobufParser.ImportedFileNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_importedFileName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.stringLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_typeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeName" ):
                listener.enterTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeName" ):
                listener.exitTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeName" ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = ProtobufParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 256
                self.match(ProtobufParser.DOT)


            self.state = 259
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.IdentifierContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.IdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.DOT)
            else:
                return self.getToken(ProtobufParser.DOT, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_qualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedIdentifier" ):
                listener.enterQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedIdentifier" ):
                listener.exitQualifiedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedIdentifier" ):
                return visitor.visitQualifiedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedIdentifier(self):

        localctx = ProtobufParser.QualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_qualifiedIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.identifier()
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==53:
                self.state = 262
                self.match(ProtobufParser.DOT)
                self.state = 263
                self.identifier()
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FieldDeclIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def fullyQualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FullyQualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldDeclTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclTypeName" ):
                listener.enterFieldDeclTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclTypeName" ):
                listener.exitFieldDeclTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclTypeName" ):
                return visitor.visitFieldDeclTypeName(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclTypeName(self):

        localctx = ProtobufParser.FieldDeclTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_fieldDeclTypeName)
        self._la = 0 # Token type
        try:
            self.state = 275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.fieldDeclIdentifier()
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 270
                    self.match(ProtobufParser.DOT)
                    self.state = 271
                    self.qualifiedIdentifier()


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 274
                self.fullyQualifiedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageFieldDeclTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageFieldDeclIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.MessageFieldDeclIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def fullyQualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FullyQualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageFieldDeclTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageFieldDeclTypeName" ):
                listener.enterMessageFieldDeclTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageFieldDeclTypeName" ):
                listener.exitMessageFieldDeclTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageFieldDeclTypeName" ):
                return visitor.visitMessageFieldDeclTypeName(self)
            else:
                return visitor.visitChildren(self)




    def messageFieldDeclTypeName(self):

        localctx = ProtobufParser.MessageFieldDeclTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_messageFieldDeclTypeName)
        self._la = 0 # Token type
        try:
            self.state = 283
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 41, 42, 43, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 277
                self.messageFieldDeclIdentifier()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 278
                    self.match(ProtobufParser.DOT)
                    self.state = 279
                    self.qualifiedIdentifier()


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 282
                self.fullyQualifiedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionFieldDeclTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extensionFieldDeclIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionFieldDeclIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def fullyQualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FullyQualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionFieldDeclTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionFieldDeclTypeName" ):
                listener.enterExtensionFieldDeclTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionFieldDeclTypeName" ):
                listener.exitExtensionFieldDeclTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionFieldDeclTypeName" ):
                return visitor.visitExtensionFieldDeclTypeName(self)
            else:
                return visitor.visitChildren(self)




    def extensionFieldDeclTypeName(self):

        localctx = ProtobufParser.ExtensionFieldDeclTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_extensionFieldDeclTypeName)
        self._la = 0 # Token type
        try:
            self.state = 291
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 285
                self.extensionFieldDeclIdentifier()
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 286
                    self.match(ProtobufParser.DOT)
                    self.state = 287
                    self.qualifiedIdentifier()


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 290
                self.fullyQualifiedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofFieldDeclTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oneofFieldDeclIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.OneofFieldDeclIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def fullyQualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FullyQualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofFieldDeclTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofFieldDeclTypeName" ):
                listener.enterOneofFieldDeclTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofFieldDeclTypeName" ):
                listener.exitOneofFieldDeclTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofFieldDeclTypeName" ):
                return visitor.visitOneofFieldDeclTypeName(self)
            else:
                return visitor.visitChildren(self)




    def oneofFieldDeclTypeName(self):

        localctx = ProtobufParser.OneofFieldDeclTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_oneofFieldDeclTypeName)
        self._la = 0 # Token type
        try:
            self.state = 299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 293
                self.oneofFieldDeclIdentifier()
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 294
                    self.match(ProtobufParser.DOT)
                    self.state = 295
                    self.qualifiedIdentifier()


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 298
                self.fullyQualifiedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclTypeNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodDeclIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.MethodDeclIdentifierContext,0)


        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def fullyQualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.FullyQualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_methodDeclTypeName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclTypeName" ):
                listener.enterMethodDeclTypeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclTypeName" ):
                listener.exitMethodDeclTypeName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclTypeName" ):
                return visitor.visitMethodDeclTypeName(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclTypeName(self):

        localctx = ProtobufParser.MethodDeclTypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_methodDeclTypeName)
        self._la = 0 # Token type
        try:
            self.state = 307
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 301
                self.methodDeclIdentifier()
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 302
                    self.match(ProtobufParser.DOT)
                    self.state = 303
                    self.qualifiedIdentifier()


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 306
                self.fullyQualifiedIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def OPTIONAL(self):
            return self.getToken(ProtobufParser.OPTIONAL, 0)

        def REQUIRED(self):
            return self.getToken(ProtobufParser.REQUIRED, 0)

        def REPEATED(self):
            return self.getToken(ProtobufParser.REPEATED, 0)

        def STREAM(self):
            return self.getToken(ProtobufParser.STREAM, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldDeclIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclIdentifier" ):
                listener.enterFieldDeclIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclIdentifier" ):
                listener.exitFieldDeclIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclIdentifier" ):
                return visitor.visitFieldDeclIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclIdentifier(self):

        localctx = ProtobufParser.FieldDeclIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_fieldDeclIdentifier)
        try:
            self.state = 321
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 41, 42, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 309
                self.alwaysIdent()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 310
                self.match(ProtobufParser.MESSAGE)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 311
                self.match(ProtobufParser.ENUM)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 4)
                self.state = 312
                self.match(ProtobufParser.ONEOF)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 5)
                self.state = 313
                self.match(ProtobufParser.RESERVED)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 6)
                self.state = 314
                self.match(ProtobufParser.EXTENSIONS)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 7)
                self.state = 315
                self.match(ProtobufParser.EXTEND)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 8)
                self.state = 316
                self.match(ProtobufParser.OPTION)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 9)
                self.state = 317
                self.match(ProtobufParser.OPTIONAL)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 10)
                self.state = 318
                self.match(ProtobufParser.REQUIRED)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 11)
                self.state = 319
                self.match(ProtobufParser.REPEATED)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 12)
                self.state = 320
                self.match(ProtobufParser.STREAM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageFieldDeclIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def STREAM(self):
            return self.getToken(ProtobufParser.STREAM, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageFieldDeclIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageFieldDeclIdentifier" ):
                listener.enterMessageFieldDeclIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageFieldDeclIdentifier" ):
                listener.exitMessageFieldDeclIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageFieldDeclIdentifier" ):
                return visitor.visitMessageFieldDeclIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def messageFieldDeclIdentifier(self):

        localctx = ProtobufParser.MessageFieldDeclIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_messageFieldDeclIdentifier)
        try:
            self.state = 325
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 41, 42, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                self.alwaysIdent()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 324
                self.match(ProtobufParser.STREAM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionFieldDeclIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def STREAM(self):
            return self.getToken(ProtobufParser.STREAM, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionFieldDeclIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionFieldDeclIdentifier" ):
                listener.enterExtensionFieldDeclIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionFieldDeclIdentifier" ):
                listener.exitExtensionFieldDeclIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionFieldDeclIdentifier" ):
                return visitor.visitExtensionFieldDeclIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def extensionFieldDeclIdentifier(self):

        localctx = ProtobufParser.ExtensionFieldDeclIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_extensionFieldDeclIdentifier)
        try:
            self.state = 336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 41, 42, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 327
                self.alwaysIdent()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 328
                self.match(ProtobufParser.MESSAGE)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 329
                self.match(ProtobufParser.ENUM)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 4)
                self.state = 330
                self.match(ProtobufParser.ONEOF)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 5)
                self.state = 331
                self.match(ProtobufParser.RESERVED)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 6)
                self.state = 332
                self.match(ProtobufParser.EXTENSIONS)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 7)
                self.state = 333
                self.match(ProtobufParser.EXTEND)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 8)
                self.state = 334
                self.match(ProtobufParser.OPTION)
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 9)
                self.state = 335
                self.match(ProtobufParser.STREAM)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofFieldDeclIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def OPTIONAL(self):
            return self.getToken(ProtobufParser.OPTIONAL, 0)

        def REQUIRED(self):
            return self.getToken(ProtobufParser.REQUIRED, 0)

        def REPEATED(self):
            return self.getToken(ProtobufParser.REPEATED, 0)

        def GROUP(self):
            return self.getToken(ProtobufParser.GROUP, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofFieldDeclIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofFieldDeclIdentifier" ):
                listener.enterOneofFieldDeclIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofFieldDeclIdentifier" ):
                listener.exitOneofFieldDeclIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofFieldDeclIdentifier" ):
                return visitor.visitOneofFieldDeclIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def oneofFieldDeclIdentifier(self):

        localctx = ProtobufParser.OneofFieldDeclIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_oneofFieldDeclIdentifier)
        try:
            self.state = 350
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 41, 42, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self.alwaysIdent()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.match(ProtobufParser.MESSAGE)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 340
                self.match(ProtobufParser.ENUM)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 4)
                self.state = 341
                self.match(ProtobufParser.ONEOF)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 5)
                self.state = 342
                self.match(ProtobufParser.RESERVED)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 6)
                self.state = 343
                self.match(ProtobufParser.EXTENSIONS)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 7)
                self.state = 344
                self.match(ProtobufParser.EXTEND)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 8)
                self.state = 345
                self.match(ProtobufParser.OPTION)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 9)
                self.state = 346
                self.match(ProtobufParser.OPTIONAL)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 10)
                self.state = 347
                self.match(ProtobufParser.REQUIRED)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 11)
                self.state = 348
                self.match(ProtobufParser.REPEATED)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 12)
                self.state = 349
                self.match(ProtobufParser.GROUP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def OPTIONAL(self):
            return self.getToken(ProtobufParser.OPTIONAL, 0)

        def REQUIRED(self):
            return self.getToken(ProtobufParser.REQUIRED, 0)

        def REPEATED(self):
            return self.getToken(ProtobufParser.REPEATED, 0)

        def GROUP(self):
            return self.getToken(ProtobufParser.GROUP, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_methodDeclIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDeclIdentifier" ):
                listener.enterMethodDeclIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDeclIdentifier" ):
                listener.exitMethodDeclIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDeclIdentifier" ):
                return visitor.visitMethodDeclIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def methodDeclIdentifier(self):

        localctx = ProtobufParser.MethodDeclIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_methodDeclIdentifier)
        try:
            self.state = 364
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 41, 42, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 352
                self.alwaysIdent()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 353
                self.match(ProtobufParser.MESSAGE)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 3)
                self.state = 354
                self.match(ProtobufParser.ENUM)
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 4)
                self.state = 355
                self.match(ProtobufParser.ONEOF)
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 5)
                self.state = 356
                self.match(ProtobufParser.RESERVED)
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 6)
                self.state = 357
                self.match(ProtobufParser.EXTENSIONS)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 7)
                self.state = 358
                self.match(ProtobufParser.EXTEND)
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 8)
                self.state = 359
                self.match(ProtobufParser.OPTION)
                pass
            elif token in [14]:
                self.enterOuterAlt(localctx, 9)
                self.state = 360
                self.match(ProtobufParser.OPTIONAL)
                pass
            elif token in [15]:
                self.enterOuterAlt(localctx, 10)
                self.state = 361
                self.match(ProtobufParser.REQUIRED)
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 11)
                self.state = 362
                self.match(ProtobufParser.REPEATED)
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 12)
                self.state = 363
                self.match(ProtobufParser.GROUP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullyQualifiedIdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(ProtobufParser.DOT, 0)

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_fullyQualifiedIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullyQualifiedIdentifier" ):
                listener.enterFullyQualifiedIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullyQualifiedIdentifier" ):
                listener.exitFullyQualifiedIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFullyQualifiedIdentifier" ):
                return visitor.visitFullyQualifiedIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def fullyQualifiedIdentifier(self):

        localctx = ProtobufParser.FullyQualifiedIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_fullyQualifiedIdentifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(ProtobufParser.DOT)
            self.state = 367
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def optionName(self):
            return self.getTypedRuleContext(ProtobufParser.OptionNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def optionValue(self):
            return self.getTypedRuleContext(ProtobufParser.OptionValueContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_optionDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionDecl" ):
                listener.enterOptionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionDecl" ):
                listener.exitOptionDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionDecl" ):
                return visitor.visitOptionDecl(self)
            else:
                return visitor.visitChildren(self)




    def optionDecl(self):

        localctx = ProtobufParser.OptionDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_optionDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(ProtobufParser.OPTION)
            self.state = 370
            self.optionName()
            self.state = 371
            self.match(ProtobufParser.EQUALS)
            self.state = 372
            self.optionValue()
            self.state = 373
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(ProtobufParser.L_BRACKET, 0)

        def compactOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.CompactOptionContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.CompactOptionContext,i)


        def R_BRACKET(self):
            return self.getToken(ProtobufParser.R_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_compactOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactOptions" ):
                listener.enterCompactOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactOptions" ):
                listener.exitCompactOptions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompactOptions" ):
                return visitor.visitCompactOptions(self)
            else:
                return visitor.visitChildren(self)




    def compactOptions(self):

        localctx = ProtobufParser.CompactOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_compactOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(ProtobufParser.L_BRACKET)
            self.state = 376
            self.compactOption()
            self.state = 381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==52:
                self.state = 377
                self.match(ProtobufParser.COMMA)
                self.state = 378
                self.compactOption()
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 384
            self.match(ProtobufParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompactOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionName(self):
            return self.getTypedRuleContext(ProtobufParser.OptionNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def optionValue(self):
            return self.getTypedRuleContext(ProtobufParser.OptionValueContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_compactOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompactOption" ):
                listener.enterCompactOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompactOption" ):
                listener.exitCompactOption(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompactOption" ):
                return visitor.visitCompactOption(self)
            else:
                return visitor.visitChildren(self)




    def compactOption(self):

        localctx = ProtobufParser.CompactOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_compactOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 386
            self.optionName()
            self.state = 387
            self.match(ProtobufParser.EQUALS)
            self.state = 388
            self.optionValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def L_PAREN(self):
            return self.getToken(ProtobufParser.L_PAREN, 0)

        def typeName(self):
            return self.getTypedRuleContext(ProtobufParser.TypeNameContext,0)


        def R_PAREN(self):
            return self.getToken(ProtobufParser.R_PAREN, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.DOT)
            else:
                return self.getToken(ProtobufParser.DOT, i)

        def optionName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.OptionNameContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.OptionNameContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_optionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionName" ):
                listener.enterOptionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionName" ):
                listener.exitOptionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionName" ):
                return visitor.visitOptionName(self)
            else:
                return visitor.visitChildren(self)




    def optionName(self):

        localctx = ProtobufParser.OptionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_optionName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]:
                self.state = 390
                self.identifier()
                pass
            elif token in [59]:
                self.state = 391
                self.match(ProtobufParser.L_PAREN)
                self.state = 392
                self.typeName()
                self.state = 393
                self.match(ProtobufParser.R_PAREN)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 401
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 397
                    self.match(ProtobufParser.DOT)
                    self.state = 398
                    self.optionName() 
                self.state = 403
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarValue(self):
            return self.getTypedRuleContext(ProtobufParser.ScalarValueContext,0)


        def messageLiteralWithBraces(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralWithBracesContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_optionValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptionValue" ):
                listener.enterOptionValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptionValue" ):
                listener.exitOptionValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOptionValue" ):
                return visitor.visitOptionValue(self)
            else:
                return visitor.visitChildren(self)




    def optionValue(self):

        localctx = ProtobufParser.OptionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_optionValue)
        try:
            self.state = 406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 404
                self.scalarValue()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 2)
                self.state = 405
                self.messageLiteralWithBraces()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.StringLiteralContext,0)


        def intLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.IntLiteralContext,0)


        def floatLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.FloatLiteralContext,0)


        def specialFloatLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.SpecialFloatLiteralContext,0)


        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_scalarValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarValue" ):
                listener.enterScalarValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarValue" ):
                listener.exitScalarValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScalarValue" ):
                return visitor.visitScalarValue(self)
            else:
                return visitor.visitChildren(self)




    def scalarValue(self):

        localctx = ProtobufParser.ScalarValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_scalarValue)
        try:
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 408
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 409
                self.intLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 410
                self.floatLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 411
                self.specialFloatLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 412
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LITERAL(self):
            return self.getToken(ProtobufParser.INT_LITERAL, 0)

        def MINUS(self):
            return self.getToken(ProtobufParser.MINUS, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_intLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntLiteral" ):
                listener.enterIntLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntLiteral" ):
                listener.exitIntLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIntLiteral" ):
                return visitor.visitIntLiteral(self)
            else:
                return visitor.visitChildren(self)




    def intLiteral(self):

        localctx = ProtobufParser.IntLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_intLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 415
                self.match(ProtobufParser.MINUS)


            self.state = 418
            self.match(ProtobufParser.INT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FLOAT_LITERAL(self):
            return self.getToken(ProtobufParser.FLOAT_LITERAL, 0)

        def MINUS(self):
            return self.getToken(ProtobufParser.MINUS, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_floatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFloatLiteral" ):
                listener.enterFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFloatLiteral" ):
                listener.exitFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFloatLiteral" ):
                return visitor.visitFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def floatLiteral(self):

        localctx = ProtobufParser.FloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_floatLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 420
                self.match(ProtobufParser.MINUS)


            self.state = 423
            self.match(ProtobufParser.FLOAT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialFloatLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(ProtobufParser.MINUS, 0)

        def INF(self):
            return self.getToken(ProtobufParser.INF, 0)

        def NAN(self):
            return self.getToken(ProtobufParser.NAN, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_specialFloatLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialFloatLiteral" ):
                listener.enterSpecialFloatLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialFloatLiteral" ):
                listener.exitSpecialFloatLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialFloatLiteral" ):
                return visitor.visitSpecialFloatLiteral(self)
            else:
                return visitor.visitChildren(self)




    def specialFloatLiteral(self):

        localctx = ProtobufParser.SpecialFloatLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_specialFloatLiteral)
        try:
            self.state = 429
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 425
                self.match(ProtobufParser.MINUS)
                self.state = 426
                self.match(ProtobufParser.INF)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 427
                self.match(ProtobufParser.MINUS)
                self.state = 428
                self.match(ProtobufParser.NAN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageLiteralWithBracesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def messageTextFormat(self):
            return self.getTypedRuleContext(ProtobufParser.MessageTextFormatContext,0)


        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageLiteralWithBraces

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageLiteralWithBraces" ):
                listener.enterMessageLiteralWithBraces(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageLiteralWithBraces" ):
                listener.exitMessageLiteralWithBraces(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageLiteralWithBraces" ):
                return visitor.visitMessageLiteralWithBraces(self)
            else:
                return visitor.visitChildren(self)




    def messageLiteralWithBraces(self):

        localctx = ProtobufParser.MessageLiteralWithBracesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_messageLiteralWithBraces)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 431
            self.match(ProtobufParser.L_BRACE)
            self.state = 432
            self.messageTextFormat()
            self.state = 433
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageTextFormatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageLiteralField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MessageLiteralFieldContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MessageLiteralFieldContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def SEMICOLON(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.SEMICOLON)
            else:
                return self.getToken(ProtobufParser.SEMICOLON, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageTextFormat

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageTextFormat" ):
                listener.enterMessageTextFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageTextFormat" ):
                listener.exitMessageTextFormat(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageTextFormat" ):
                return visitor.visitMessageTextFormat(self)
            else:
                return visitor.visitChildren(self)




    def messageTextFormat(self):

        localctx = ProtobufParser.MessageTextFormatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_messageTextFormat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -9223301668110598176) != 0):
                self.state = 435
                self.messageLiteralField()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==51 or _la==52:
                    self.state = 436
                    _la = self._input.LA(1)
                    if not(_la==51 or _la==52):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageLiteralFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageLiteralFieldName(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralFieldNameContext,0)


        def COLON(self):
            return self.getToken(ProtobufParser.COLON, 0)

        def value(self):
            return self.getTypedRuleContext(ProtobufParser.ValueContext,0)


        def messageValue(self):
            return self.getTypedRuleContext(ProtobufParser.MessageValueContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageLiteralField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageLiteralField" ):
                listener.enterMessageLiteralField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageLiteralField" ):
                listener.exitMessageLiteralField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageLiteralField" ):
                return visitor.visitMessageLiteralField(self)
            else:
                return visitor.visitChildren(self)




    def messageLiteralField(self):

        localctx = ProtobufParser.MessageLiteralFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_messageLiteralField)
        try:
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 444
                self.messageLiteralFieldName()
                self.state = 445
                self.match(ProtobufParser.COLON)
                self.state = 446
                self.value()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 448
                self.messageLiteralFieldName()
                self.state = 449
                self.messageValue()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageLiteralFieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def L_BRACKET(self):
            return self.getToken(ProtobufParser.L_BRACKET, 0)

        def specialFieldName(self):
            return self.getTypedRuleContext(ProtobufParser.SpecialFieldNameContext,0)


        def R_BRACKET(self):
            return self.getToken(ProtobufParser.R_BRACKET, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageLiteralFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageLiteralFieldName" ):
                listener.enterMessageLiteralFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageLiteralFieldName" ):
                listener.exitMessageLiteralFieldName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageLiteralFieldName" ):
                return visitor.visitMessageLiteralFieldName(self)
            else:
                return visitor.visitChildren(self)




    def messageLiteralFieldName(self):

        localctx = ProtobufParser.MessageLiteralFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_messageLiteralFieldName)
        try:
            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 453
                self.fieldName()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 454
                self.match(ProtobufParser.L_BRACKET)
                self.state = 455
                self.specialFieldName()
                self.state = 456
                self.match(ProtobufParser.R_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecialFieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extensionFieldName(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionFieldNameContext,0)


        def typeURL(self):
            return self.getTypedRuleContext(ProtobufParser.TypeURLContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_specialFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialFieldName" ):
                listener.enterSpecialFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialFieldName" ):
                listener.exitSpecialFieldName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpecialFieldName" ):
                return visitor.visitSpecialFieldName(self)
            else:
                return visitor.visitChildren(self)




    def specialFieldName(self):

        localctx = ProtobufParser.SpecialFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_specialFieldName)
        try:
            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 460
                self.extensionFieldName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.typeURL()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionFieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self):
            return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionFieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionFieldName" ):
                listener.enterExtensionFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionFieldName" ):
                listener.exitExtensionFieldName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionFieldName" ):
                return visitor.visitExtensionFieldName(self)
            else:
                return visitor.visitChildren(self)




    def extensionFieldName(self):

        localctx = ProtobufParser.ExtensionFieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_extensionFieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 464
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeURLContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def qualifiedIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.QualifiedIdentifierContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.QualifiedIdentifierContext,i)


        def SLASH(self):
            return self.getToken(ProtobufParser.SLASH, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_typeURL

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeURL" ):
                listener.enterTypeURL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeURL" ):
                listener.exitTypeURL(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeURL" ):
                return visitor.visitTypeURL(self)
            else:
                return visitor.visitChildren(self)




    def typeURL(self):

        localctx = ProtobufParser.TypeURLContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_typeURL)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.qualifiedIdentifier()
            self.state = 467
            self.match(ProtobufParser.SLASH)
            self.state = 468
            self.qualifiedIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarValue(self):
            return self.getTypedRuleContext(ProtobufParser.ScalarValueContext,0)


        def messageLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralContext,0)


        def listLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.ListLiteralContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue" ):
                listener.enterValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue" ):
                listener.exitValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValue" ):
                return visitor.visitValue(self)
            else:
                return visitor.visitChildren(self)




    def value(self):

        localctx = ProtobufParser.ValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_value)
        try:
            self.state = 473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                self.scalarValue()
                pass
            elif token in [61, 65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 471
                self.messageLiteral()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 3)
                self.state = 472
                self.listLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralContext,0)


        def listOfMessagesLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.ListOfMessagesLiteralContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageValue" ):
                listener.enterMessageValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageValue" ):
                listener.exitMessageValue(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageValue" ):
                return visitor.visitMessageValue(self)
            else:
                return visitor.visitChildren(self)




    def messageValue(self):

        localctx = ProtobufParser.MessageValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_messageValue)
        try:
            self.state = 477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61, 65]:
                self.enterOuterAlt(localctx, 1)
                self.state = 475
                self.messageLiteral()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 2)
                self.state = 476
                self.listOfMessagesLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageLiteralWithBraces(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralWithBracesContext,0)


        def L_ANGLE(self):
            return self.getToken(ProtobufParser.L_ANGLE, 0)

        def messageTextFormat(self):
            return self.getTypedRuleContext(ProtobufParser.MessageTextFormatContext,0)


        def R_ANGLE(self):
            return self.getToken(ProtobufParser.R_ANGLE, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageLiteral" ):
                listener.enterMessageLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageLiteral" ):
                listener.exitMessageLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageLiteral" ):
                return visitor.visitMessageLiteral(self)
            else:
                return visitor.visitChildren(self)




    def messageLiteral(self):

        localctx = ProtobufParser.MessageLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_messageLiteral)
        try:
            self.state = 484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [61]:
                self.enterOuterAlt(localctx, 1)
                self.state = 479
                self.messageLiteralWithBraces()
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 480
                self.match(ProtobufParser.L_ANGLE)
                self.state = 481
                self.messageTextFormat()
                self.state = 482
                self.match(ProtobufParser.R_ANGLE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(ProtobufParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(ProtobufParser.R_BRACKET, 0)

        def listElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.ListElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.ListElementContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_listLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListLiteral" ):
                listener.enterListLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListLiteral" ):
                listener.exitListLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListLiteral" ):
                return visitor.visitListLiteral(self)
            else:
                return visitor.visitChildren(self)




    def listLiteral(self):

        localctx = ProtobufParser.ListLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_listLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 486
            self.match(ProtobufParser.L_BRACKET)
            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & 1229526678737256447) != 0):
                self.state = 487
                self.listElement()
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==52:
                    self.state = 488
                    self.match(ProtobufParser.COMMA)
                    self.state = 489
                    self.listElement()
                    self.state = 494
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 497
            self.match(ProtobufParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalarValue(self):
            return self.getTypedRuleContext(ProtobufParser.ScalarValueContext,0)


        def messageLiteral(self):
            return self.getTypedRuleContext(ProtobufParser.MessageLiteralContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_listElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListElement" ):
                listener.enterListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListElement" ):
                listener.exitListElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListElement" ):
                return visitor.visitListElement(self)
            else:
                return visitor.visitChildren(self)




    def listElement(self):

        localctx = ProtobufParser.ListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_listElement)
        try:
            self.state = 501
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 50, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 499
                self.scalarValue()
                pass
            elif token in [61, 65]:
                self.enterOuterAlt(localctx, 2)
                self.state = 500
                self.messageLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ListOfMessagesLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_BRACKET(self):
            return self.getToken(ProtobufParser.L_BRACKET, 0)

        def R_BRACKET(self):
            return self.getToken(ProtobufParser.R_BRACKET, 0)

        def messageLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MessageLiteralContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MessageLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_listOfMessagesLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterListOfMessagesLiteral" ):
                listener.enterListOfMessagesLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitListOfMessagesLiteral" ):
                listener.exitListOfMessagesLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitListOfMessagesLiteral" ):
                return visitor.visitListOfMessagesLiteral(self)
            else:
                return visitor.visitChildren(self)




    def listOfMessagesLiteral(self):

        localctx = ProtobufParser.ListOfMessagesLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_listOfMessagesLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(ProtobufParser.L_BRACKET)
            self.state = 512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61 or _la==65:
                self.state = 504
                self.messageLiteral()
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==52:
                    self.state = 505
                    self.match(ProtobufParser.COMMA)
                    self.state = 506
                    self.messageLiteral()
                    self.state = 511
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 514
            self.match(ProtobufParser.R_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def messageName(self):
            return self.getTypedRuleContext(ProtobufParser.MessageNameContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def messageElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MessageElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MessageElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageDecl" ):
                listener.enterMessageDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageDecl" ):
                listener.exitMessageDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageDecl" ):
                return visitor.visitMessageDecl(self)
            else:
                return visitor.visitChildren(self)




    def messageDecl(self):

        localctx = ProtobufParser.MessageDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_messageDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(ProtobufParser.MESSAGE)
            self.state = 517
            self.messageName()
            self.state = 518
            self.match(ProtobufParser.L_BRACE)
            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 11329367812603884) != 0):
                self.state = 519
                self.messageElement()
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 525
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageName" ):
                listener.enterMessageName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageName" ):
                listener.exitMessageName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageName" ):
                return visitor.visitMessageName(self)
            else:
                return visitor.visitChildren(self)




    def messageName(self):

        localctx = ProtobufParser.MessageNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_messageName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 527
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageFieldDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MessageFieldDeclContext,0)


        def groupDecl(self):
            return self.getTypedRuleContext(ProtobufParser.GroupDeclContext,0)


        def oneofDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OneofDeclContext,0)


        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def extensionRangeDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionRangeDeclContext,0)


        def messageReservedDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MessageReservedDeclContext,0)


        def messageDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MessageDeclContext,0)


        def enumDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EnumDeclContext,0)


        def extensionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionDeclContext,0)


        def mapFieldDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MapFieldDeclContext,0)


        def emptyDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EmptyDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageElement" ):
                listener.enterMessageElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageElement" ):
                listener.exitMessageElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageElement" ):
                return visitor.visitMessageElement(self)
            else:
                return visitor.visitChildren(self)




    def messageElement(self):

        localctx = ProtobufParser.MessageElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_messageElement)
        try:
            self.state = 541
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 529
                self.messageFieldDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 530
                self.groupDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 531
                self.oneofDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 532
                self.optionDecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 533
                self.extensionRangeDecl()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 534
                self.messageReservedDecl()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 535
                self.messageDecl()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 536
                self.enumDecl()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 537
                self.extensionDecl()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 538
                self.mapFieldDecl()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 539
                self.emptyDecl()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 540
                self.commentDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageFieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclWithCardinality(self):
            return self.getTypedRuleContext(ProtobufParser.FieldDeclWithCardinalityContext,0)


        def messageFieldDeclTypeName(self):
            return self.getTypedRuleContext(ProtobufParser.MessageFieldDeclTypeNameContext,0)


        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageFieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageFieldDecl" ):
                listener.enterMessageFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageFieldDecl" ):
                listener.exitMessageFieldDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageFieldDecl" ):
                return visitor.visitMessageFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def messageFieldDecl(self):

        localctx = ProtobufParser.MessageFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_messageFieldDecl)
        self._la = 0 # Token type
        try:
            self.state = 553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 14, 15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 543
                self.fieldDeclWithCardinality()
                pass
            elif token in [5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 41, 42, 43, 44, 45, 53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.messageFieldDeclTypeName()
                self.state = 545
                self.fieldName()
                self.state = 546
                self.match(ProtobufParser.EQUALS)
                self.state = 547
                self.fieldNumber()
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 548
                    self.compactOptions()


                self.state = 551
                self.match(ProtobufParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldDeclWithCardinalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldCardinality(self):
            return self.getTypedRuleContext(ProtobufParser.FieldCardinalityContext,0)


        def fieldDeclTypeName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldDeclTypeNameContext,0)


        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldDeclWithCardinality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldDeclWithCardinality" ):
                listener.enterFieldDeclWithCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldDeclWithCardinality" ):
                listener.exitFieldDeclWithCardinality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldDeclWithCardinality" ):
                return visitor.visitFieldDeclWithCardinality(self)
            else:
                return visitor.visitChildren(self)




    def fieldDeclWithCardinality(self):

        localctx = ProtobufParser.FieldDeclWithCardinalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_fieldDeclWithCardinality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.fieldCardinality()
            self.state = 556
            self.fieldDeclTypeName()
            self.state = 557
            self.fieldName()
            self.state = 558
            self.match(ProtobufParser.EQUALS)
            self.state = 559
            self.fieldNumber()
            self.state = 561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 560
                self.compactOptions()


            self.state = 563
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldCardinalityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REQUIRED(self):
            return self.getToken(ProtobufParser.REQUIRED, 0)

        def OPTIONAL(self):
            return self.getToken(ProtobufParser.OPTIONAL, 0)

        def REPEATED(self):
            return self.getToken(ProtobufParser.REPEATED, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldCardinality

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldCardinality" ):
                listener.enterFieldCardinality(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldCardinality" ):
                listener.exitFieldCardinality(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldCardinality" ):
                return visitor.visitFieldCardinality(self)
            else:
                return visitor.visitChildren(self)




    def fieldCardinality(self):

        localctx = ProtobufParser.FieldCardinalityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_fieldCardinality)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 57344) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldName" ):
                listener.enterFieldName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldName" ):
                listener.exitFieldName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldName" ):
                return visitor.visitFieldName(self)
            else:
                return visitor.visitChildren(self)




    def fieldName(self):

        localctx = ProtobufParser.FieldNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_fieldName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 567
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FieldNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LITERAL(self):
            return self.getToken(ProtobufParser.INT_LITERAL, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_fieldNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFieldNumber" ):
                listener.enterFieldNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFieldNumber" ):
                listener.exitFieldNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFieldNumber" ):
                return visitor.visitFieldNumber(self)
            else:
                return visitor.visitChildren(self)




    def fieldNumber(self):

        localctx = ProtobufParser.FieldNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_fieldNumber)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 569
            self.match(ProtobufParser.INT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapFieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapType(self):
            return self.getTypedRuleContext(ProtobufParser.MapTypeContext,0)


        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_mapFieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapFieldDecl" ):
                listener.enterMapFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapFieldDecl" ):
                listener.exitMapFieldDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapFieldDecl" ):
                return visitor.visitMapFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def mapFieldDecl(self):

        localctx = ProtobufParser.MapFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_mapFieldDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.mapType()
            self.state = 572
            self.fieldName()
            self.state = 573
            self.match(ProtobufParser.EQUALS)
            self.state = 574
            self.fieldNumber()
            self.state = 576
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 575
                self.compactOptions()


            self.state = 578
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAP(self):
            return self.getToken(ProtobufParser.MAP, 0)

        def L_ANGLE(self):
            return self.getToken(ProtobufParser.L_ANGLE, 0)

        def mapKeyType(self):
            return self.getTypedRuleContext(ProtobufParser.MapKeyTypeContext,0)


        def COMMA(self):
            return self.getToken(ProtobufParser.COMMA, 0)

        def typeName(self):
            return self.getTypedRuleContext(ProtobufParser.TypeNameContext,0)


        def R_ANGLE(self):
            return self.getToken(ProtobufParser.R_ANGLE, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_mapType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapType" ):
                listener.enterMapType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapType" ):
                listener.exitMapType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapType" ):
                return visitor.visitMapType(self)
            else:
                return visitor.visitChildren(self)




    def mapType(self):

        localctx = ProtobufParser.MapTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_mapType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(ProtobufParser.MAP)
            self.state = 581
            self.match(ProtobufParser.L_ANGLE)
            self.state = 582
            self.mapKeyType()
            self.state = 583
            self.match(ProtobufParser.COMMA)
            self.state = 584
            self.typeName()
            self.state = 585
            self.match(ProtobufParser.R_ANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MapKeyTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT32(self):
            return self.getToken(ProtobufParser.INT32, 0)

        def INT64(self):
            return self.getToken(ProtobufParser.INT64, 0)

        def UINT32(self):
            return self.getToken(ProtobufParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(ProtobufParser.UINT64, 0)

        def SINT32(self):
            return self.getToken(ProtobufParser.SINT32, 0)

        def SINT64(self):
            return self.getToken(ProtobufParser.SINT64, 0)

        def FIXED32(self):
            return self.getToken(ProtobufParser.FIXED32, 0)

        def FIXED64(self):
            return self.getToken(ProtobufParser.FIXED64, 0)

        def SFIXED32(self):
            return self.getToken(ProtobufParser.SFIXED32, 0)

        def SFIXED64(self):
            return self.getToken(ProtobufParser.SFIXED64, 0)

        def BOOL(self):
            return self.getToken(ProtobufParser.BOOL, 0)

        def STRING(self):
            return self.getToken(ProtobufParser.STRING, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_mapKeyType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapKeyType" ):
                listener.enterMapKeyType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapKeyType" ):
                listener.exitMapKeyType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMapKeyType" ):
                return visitor.visitMapKeyType(self)
            else:
                return visitor.visitChildren(self)




    def mapKeyType(self):

        localctx = ProtobufParser.MapKeyTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_mapKeyType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 2145583104) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(ProtobufParser.GROUP, 0)

        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def fieldCardinality(self):
            return self.getTypedRuleContext(ProtobufParser.FieldCardinalityContext,0)


        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def messageElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MessageElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MessageElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_groupDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupDecl" ):
                listener.enterGroupDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupDecl" ):
                listener.exitGroupDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroupDecl" ):
                return visitor.visitGroupDecl(self)
            else:
                return visitor.visitChildren(self)




    def groupDecl(self):

        localctx = ProtobufParser.GroupDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_groupDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 57344) != 0):
                self.state = 589
                self.fieldCardinality()


            self.state = 592
            self.match(ProtobufParser.GROUP)
            self.state = 593
            self.fieldName()
            self.state = 594
            self.match(ProtobufParser.EQUALS)
            self.state = 595
            self.fieldNumber()
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 596
                self.compactOptions()


            self.state = 599
            self.match(ProtobufParser.L_BRACE)
            self.state = 603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 11329367812603884) != 0):
                self.state = 600
                self.messageElement()
                self.state = 605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 606
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def oneofName(self):
            return self.getTypedRuleContext(ProtobufParser.OneofNameContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def oneofElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.OneofElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.OneofElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofDecl" ):
                listener.enterOneofDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofDecl" ):
                listener.exitOneofDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofDecl" ):
                return visitor.visitOneofDecl(self)
            else:
                return visitor.visitChildren(self)




    def oneofDecl(self):

        localctx = ProtobufParser.OneofDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_oneofDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(ProtobufParser.ONEOF)
            self.state = 609
            self.oneofName()
            self.state = 610
            self.match(ProtobufParser.L_BRACE)
            self.state = 614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9068771905896428) != 0):
                self.state = 611
                self.oneofElement()
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 617
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofName" ):
                listener.enterOneofName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofName" ):
                listener.exitOneofName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofName" ):
                return visitor.visitOneofName(self)
            else:
                return visitor.visitChildren(self)




    def oneofName(self):

        localctx = ProtobufParser.OneofNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_oneofName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 619
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def oneofFieldDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OneofFieldDeclContext,0)


        def oneofGroupDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OneofGroupDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofElement" ):
                listener.enterOneofElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofElement" ):
                listener.exitOneofElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofElement" ):
                return visitor.visitOneofElement(self)
            else:
                return visitor.visitChildren(self)




    def oneofElement(self):

        localctx = ProtobufParser.OneofElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_oneofElement)
        try:
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 621
                self.optionDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 622
                self.oneofFieldDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 623
                self.oneofGroupDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 624
                self.commentDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofFieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def oneofFieldDeclTypeName(self):
            return self.getTypedRuleContext(ProtobufParser.OneofFieldDeclTypeNameContext,0)


        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofFieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofFieldDecl" ):
                listener.enterOneofFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofFieldDecl" ):
                listener.exitOneofFieldDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofFieldDecl" ):
                return visitor.visitOneofFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def oneofFieldDecl(self):

        localctx = ProtobufParser.OneofFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_oneofFieldDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.oneofFieldDeclTypeName()
            self.state = 628
            self.fieldName()
            self.state = 629
            self.match(ProtobufParser.EQUALS)
            self.state = 630
            self.fieldNumber()
            self.state = 632
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 631
                self.compactOptions()


            self.state = 634
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OneofGroupDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(ProtobufParser.GROUP, 0)

        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def messageElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MessageElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MessageElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_oneofGroupDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOneofGroupDecl" ):
                listener.enterOneofGroupDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOneofGroupDecl" ):
                listener.exitOneofGroupDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOneofGroupDecl" ):
                return visitor.visitOneofGroupDecl(self)
            else:
                return visitor.visitChildren(self)




    def oneofGroupDecl(self):

        localctx = ProtobufParser.OneofGroupDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_oneofGroupDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 636
            self.match(ProtobufParser.GROUP)
            self.state = 637
            self.fieldName()
            self.state = 638
            self.match(ProtobufParser.EQUALS)
            self.state = 639
            self.fieldNumber()
            self.state = 641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 640
                self.compactOptions()


            self.state = 643
            self.match(ProtobufParser.L_BRACE)
            self.state = 647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 11329367812603884) != 0):
                self.state = 644
                self.messageElement()
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 650
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionRangeDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def tagRanges(self):
            return self.getTypedRuleContext(ProtobufParser.TagRangesContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionRangeDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionRangeDecl" ):
                listener.enterExtensionRangeDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionRangeDecl" ):
                listener.exitExtensionRangeDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionRangeDecl" ):
                return visitor.visitExtensionRangeDecl(self)
            else:
                return visitor.visitChildren(self)




    def extensionRangeDecl(self):

        localctx = ProtobufParser.ExtensionRangeDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_extensionRangeDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(ProtobufParser.EXTENSIONS)
            self.state = 653
            self.tagRanges()
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 654
                self.compactOptions()


            self.state = 657
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagRangesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.TagRangeContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.TagRangeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_tagRanges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagRanges" ):
                listener.enterTagRanges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagRanges" ):
                listener.exitTagRanges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagRanges" ):
                return visitor.visitTagRanges(self)
            else:
                return visitor.visitChildren(self)




    def tagRanges(self):

        localctx = ProtobufParser.TagRangesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_tagRanges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.tagRange()
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==52:
                self.state = 660
                self.match(ProtobufParser.COMMA)
                self.state = 661
                self.tagRange()
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tagRangeStart(self):
            return self.getTypedRuleContext(ProtobufParser.TagRangeStartContext,0)


        def TO(self):
            return self.getToken(ProtobufParser.TO, 0)

        def tagRangeEnd(self):
            return self.getTypedRuleContext(ProtobufParser.TagRangeEndContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_tagRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagRange" ):
                listener.enterTagRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagRange" ):
                listener.exitTagRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagRange" ):
                return visitor.visitTagRange(self)
            else:
                return visitor.visitChildren(self)




    def tagRange(self):

        localctx = ProtobufParser.TagRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_tagRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 667
            self.tagRangeStart()
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 668
                self.match(ProtobufParser.TO)
                self.state = 669
                self.tagRangeEnd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagRangeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_tagRangeStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagRangeStart" ):
                listener.enterTagRangeStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagRangeStart" ):
                listener.exitTagRangeStart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagRangeStart" ):
                return visitor.visitTagRangeStart(self)
            else:
                return visitor.visitChildren(self)




    def tagRangeStart(self):

        localctx = ProtobufParser.TagRangeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_tagRangeStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 672
            self.fieldNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TagRangeEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def MAX(self):
            return self.getToken(ProtobufParser.MAX, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_tagRangeEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTagRangeEnd" ):
                listener.enterTagRangeEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTagRangeEnd" ):
                listener.exitTagRangeEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTagRangeEnd" ):
                return visitor.visitTagRangeEnd(self)
            else:
                return visitor.visitChildren(self)




    def tagRangeEnd(self):

        localctx = ProtobufParser.TagRangeEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_tagRangeEnd)
        try:
            self.state = 676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.fieldNumber()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.match(ProtobufParser.MAX)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageReservedDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def tagRanges(self):
            return self.getTypedRuleContext(ProtobufParser.TagRangesContext,0)


        def names(self):
            return self.getTypedRuleContext(ProtobufParser.NamesContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_messageReservedDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageReservedDecl" ):
                listener.enterMessageReservedDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageReservedDecl" ):
                listener.exitMessageReservedDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageReservedDecl" ):
                return visitor.visitMessageReservedDecl(self)
            else:
                return visitor.visitChildren(self)




    def messageReservedDecl(self):

        localctx = ProtobufParser.MessageReservedDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_messageReservedDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(ProtobufParser.RESERVED)
            self.state = 681
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46]:
                self.state = 679
                self.tagRanges()
                pass
            elif token in [50]:
                self.state = 680
                self.names()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 683
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.StringLiteralContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNames" ):
                listener.enterNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNames" ):
                listener.exitNames(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNames" ):
                return visitor.visitNames(self)
            else:
                return visitor.visitChildren(self)




    def names(self):

        localctx = ProtobufParser.NamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.stringLiteral()
            self.state = 690
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==52:
                self.state = 686
                self.match(ProtobufParser.COMMA)
                self.state = 687
                self.stringLiteral()
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def enumName(self):
            return self.getTypedRuleContext(ProtobufParser.EnumNameContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def enumElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.EnumElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.EnumElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumDecl" ):
                listener.enterEnumDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumDecl" ):
                listener.exitEnumDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumDecl" ):
                return visitor.visitEnumDecl(self)
            else:
                return visitor.visitChildren(self)




    def enumDecl(self):

        localctx = ProtobufParser.EnumDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_enumDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(ProtobufParser.ENUM)
            self.state = 694
            self.enumName()
            self.state = 695
            self.match(ProtobufParser.L_BRACE)
            self.state = 699
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2322168557862892) != 0):
                self.state = 696
                self.enumElement()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 702
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumName" ):
                listener.enterEnumName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumName" ):
                listener.exitEnumName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumName" ):
                return visitor.visitEnumName(self)
            else:
                return visitor.visitChildren(self)




    def enumName(self):

        localctx = ProtobufParser.EnumNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_enumName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def enumValueDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueDeclContext,0)


        def enumReservedDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EnumReservedDeclContext,0)


        def emptyDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EmptyDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumElement" ):
                listener.enterEnumElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumElement" ):
                listener.exitEnumElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumElement" ):
                return visitor.visitEnumElement(self)
            else:
                return visitor.visitChildren(self)




    def enumElement(self):

        localctx = ProtobufParser.EnumElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_enumElement)
        try:
            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.optionDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.enumValueDecl()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 708
                self.enumReservedDecl()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 709
                self.emptyDecl()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 710
                self.commentDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumValueName(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def enumValueNumber(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueDecl" ):
                listener.enterEnumValueDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueDecl" ):
                listener.exitEnumValueDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueDecl" ):
                return visitor.visitEnumValueDecl(self)
            else:
                return visitor.visitChildren(self)




    def enumValueDecl(self):

        localctx = ProtobufParser.EnumValueDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_enumValueDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.enumValueName()
            self.state = 714
            self.match(ProtobufParser.EQUALS)
            self.state = 715
            self.enumValueNumber()
            self.state = 717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==63:
                self.state = 716
                self.compactOptions()


            self.state = 719
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueName" ):
                listener.enterEnumValueName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueName" ):
                listener.exitEnumValueName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueName" ):
                return visitor.visitEnumValueName(self)
            else:
                return visitor.visitChildren(self)




    def enumValueName(self):

        localctx = ProtobufParser.EnumValueNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_enumValueName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 721
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueNumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INT_LITERAL(self):
            return self.getToken(ProtobufParser.INT_LITERAL, 0)

        def MINUS(self):
            return self.getToken(ProtobufParser.MINUS, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueNumber

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueNumber" ):
                listener.enterEnumValueNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueNumber" ):
                listener.exitEnumValueNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueNumber" ):
                return visitor.visitEnumValueNumber(self)
            else:
                return visitor.visitChildren(self)




    def enumValueNumber(self):

        localctx = ProtobufParser.EnumValueNumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_enumValueNumber)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 723
                self.match(ProtobufParser.MINUS)


            self.state = 726
            self.match(ProtobufParser.INT_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumReservedDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def enumValueRanges(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueRangesContext,0)


        def names(self):
            return self.getTypedRuleContext(ProtobufParser.NamesContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumReservedDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumReservedDecl" ):
                listener.enterEnumReservedDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumReservedDecl" ):
                listener.exitEnumReservedDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumReservedDecl" ):
                return visitor.visitEnumReservedDecl(self)
            else:
                return visitor.visitChildren(self)




    def enumReservedDecl(self):

        localctx = ProtobufParser.EnumReservedDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_enumReservedDecl)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 728
            self.match(ProtobufParser.RESERVED)
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 57]:
                self.state = 729
                self.enumValueRanges()
                pass
            elif token in [50]:
                self.state = 730
                self.names()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 733
            self.match(ProtobufParser.SEMICOLON)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueRangesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumValueRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.EnumValueRangeContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.EnumValueRangeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(ProtobufParser.COMMA)
            else:
                return self.getToken(ProtobufParser.COMMA, i)

        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueRanges

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueRanges" ):
                listener.enterEnumValueRanges(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueRanges" ):
                listener.exitEnumValueRanges(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueRanges" ):
                return visitor.visitEnumValueRanges(self)
            else:
                return visitor.visitChildren(self)




    def enumValueRanges(self):

        localctx = ProtobufParser.EnumValueRangesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_enumValueRanges)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.enumValueRange()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==52:
                self.state = 736
                self.match(ProtobufParser.COMMA)
                self.state = 737
                self.enumValueRange()
                self.state = 742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumValueRangeStart(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueRangeStartContext,0)


        def TO(self):
            return self.getToken(ProtobufParser.TO, 0)

        def enumValueRangeEnd(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueRangeEndContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueRange" ):
                listener.enterEnumValueRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueRange" ):
                listener.exitEnumValueRange(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueRange" ):
                return visitor.visitEnumValueRange(self)
            else:
                return visitor.visitChildren(self)




    def enumValueRange(self):

        localctx = ProtobufParser.EnumValueRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_enumValueRange)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.enumValueRangeStart()
            self.state = 746
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 744
                self.match(ProtobufParser.TO)
                self.state = 745
                self.enumValueRangeEnd()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueRangeStartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumValueNumber(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueNumberContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueRangeStart

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueRangeStart" ):
                listener.enterEnumValueRangeStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueRangeStart" ):
                listener.exitEnumValueRangeStart(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueRangeStart" ):
                return visitor.visitEnumValueRangeStart(self)
            else:
                return visitor.visitChildren(self)




    def enumValueRangeStart(self):

        localctx = ProtobufParser.EnumValueRangeStartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_enumValueRangeStart)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.enumValueNumber()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumValueRangeEndContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumValueNumber(self):
            return self.getTypedRuleContext(ProtobufParser.EnumValueNumberContext,0)


        def MAX(self):
            return self.getToken(ProtobufParser.MAX, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_enumValueRangeEnd

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumValueRangeEnd" ):
                listener.enterEnumValueRangeEnd(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumValueRangeEnd" ):
                listener.exitEnumValueRangeEnd(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumValueRangeEnd" ):
                return visitor.visitEnumValueRangeEnd(self)
            else:
                return visitor.visitChildren(self)




    def enumValueRangeEnd(self):

        localctx = ProtobufParser.EnumValueRangeEndContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_enumValueRangeEnd)
        try:
            self.state = 752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [46, 57]:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                self.enumValueNumber()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.match(ProtobufParser.MAX)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def extendedMessage(self):
            return self.getTypedRuleContext(ProtobufParser.ExtendedMessageContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def extensionElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.ExtensionElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.ExtensionElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionDecl" ):
                listener.enterExtensionDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionDecl" ):
                listener.exitExtensionDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionDecl" ):
                return visitor.visitExtensionDecl(self)
            else:
                return visitor.visitChildren(self)




    def extensionDecl(self):

        localctx = ProtobufParser.ExtensionDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_extensionDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 754
            self.match(ProtobufParser.EXTEND)
            self.state = 755
            self.extendedMessage()
            self.state = 756
            self.match(ProtobufParser.L_BRACE)
            self.state = 760
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 9077567998918624) != 0):
                self.state = 757
                self.extensionElement()
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 763
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtendedMessageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(ProtobufParser.TypeNameContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extendedMessage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtendedMessage" ):
                listener.enterExtendedMessage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtendedMessage" ):
                listener.exitExtendedMessage(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtendedMessage" ):
                return visitor.visitExtendedMessage(self)
            else:
                return visitor.visitChildren(self)




    def extendedMessage(self):

        localctx = ProtobufParser.ExtendedMessageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_extendedMessage)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.typeName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def extensionFieldDecl(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionFieldDeclContext,0)


        def groupDecl(self):
            return self.getTypedRuleContext(ProtobufParser.GroupDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionElement" ):
                listener.enterExtensionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionElement" ):
                listener.exitExtensionElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionElement" ):
                return visitor.visitExtensionElement(self)
            else:
                return visitor.visitChildren(self)




    def extensionElement(self):

        localctx = ProtobufParser.ExtensionElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_extensionElement)
        try:
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 767
                self.extensionFieldDecl()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 768
                self.groupDecl()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionFieldDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fieldDeclWithCardinality(self):
            return self.getTypedRuleContext(ProtobufParser.FieldDeclWithCardinalityContext,0)


        def extensionFieldDeclTypeName(self):
            return self.getTypedRuleContext(ProtobufParser.ExtensionFieldDeclTypeNameContext,0)


        def fieldName(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNameContext,0)


        def EQUALS(self):
            return self.getToken(ProtobufParser.EQUALS, 0)

        def fieldNumber(self):
            return self.getTypedRuleContext(ProtobufParser.FieldNumberContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def compactOptions(self):
            return self.getTypedRuleContext(ProtobufParser.CompactOptionsContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_extensionFieldDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionFieldDecl" ):
                listener.enterExtensionFieldDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionFieldDecl" ):
                listener.exitExtensionFieldDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionFieldDecl" ):
                return visitor.visitExtensionFieldDecl(self)
            else:
                return visitor.visitChildren(self)




    def extensionFieldDecl(self):

        localctx = ProtobufParser.ExtensionFieldDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_extensionFieldDecl)
        self._la = 0 # Token type
        try:
            self.state = 781
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [13, 14, 15]:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.fieldDeclWithCardinality()
                pass
            elif token in [5, 6, 7, 8, 9, 10, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 772
                self.extensionFieldDeclTypeName()
                self.state = 773
                self.fieldName()
                self.state = 774
                self.match(ProtobufParser.EQUALS)
                self.state = 775
                self.fieldNumber()
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==63:
                    self.state = 776
                    self.compactOptions()


                self.state = 779
                self.match(ProtobufParser.SEMICOLON)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SERVICE(self):
            return self.getToken(ProtobufParser.SERVICE, 0)

        def serviceName(self):
            return self.getTypedRuleContext(ProtobufParser.ServiceNameContext,0)


        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def serviceElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.ServiceElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.ServiceElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_serviceDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceDecl" ):
                listener.enterServiceDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceDecl" ):
                listener.exitServiceDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServiceDecl" ):
                return visitor.visitServiceDecl(self)
            else:
                return visitor.visitChildren(self)




    def serviceDecl(self):

        localctx = ProtobufParser.ServiceDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_serviceDecl)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(ProtobufParser.SERVICE)
            self.state = 784
            self.serviceName()
            self.state = 785
            self.match(ProtobufParser.L_BRACE)
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2256197860197388) != 0):
                self.state = 786
                self.serviceElement()
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 792
            self.match(ProtobufParser.R_BRACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_serviceName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceName" ):
                listener.enterServiceName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceName" ):
                listener.exitServiceName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServiceName" ):
                return visitor.visitServiceName(self)
            else:
                return visitor.visitChildren(self)




    def serviceName(self):

        localctx = ProtobufParser.ServiceNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_serviceName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServiceElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def methodDecl(self):
            return self.getTypedRuleContext(ProtobufParser.MethodDeclContext,0)


        def emptyDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EmptyDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_serviceElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServiceElement" ):
                listener.enterServiceElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServiceElement" ):
                listener.exitServiceElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitServiceElement" ):
                return visitor.visitServiceElement(self)
            else:
                return visitor.visitChildren(self)




    def serviceElement(self):

        localctx = ProtobufParser.ServiceElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_serviceElement)
        try:
            self.state = 800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.optionDecl()
                pass
            elif token in [2, 3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 797
                self.commentDecl()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 3)
                self.state = 798
                self.methodDecl()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 4)
                self.state = 799
                self.emptyDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodDeclContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RPC(self):
            return self.getToken(ProtobufParser.RPC, 0)

        def methodName(self):
            return self.getTypedRuleContext(ProtobufParser.MethodNameContext,0)


        def inputType(self):
            return self.getTypedRuleContext(ProtobufParser.InputTypeContext,0)


        def RETURNS(self):
            return self.getToken(ProtobufParser.RETURNS, 0)

        def outputType(self):
            return self.getTypedRuleContext(ProtobufParser.OutputTypeContext,0)


        def SEMICOLON(self):
            return self.getToken(ProtobufParser.SEMICOLON, 0)

        def L_BRACE(self):
            return self.getToken(ProtobufParser.L_BRACE, 0)

        def R_BRACE(self):
            return self.getToken(ProtobufParser.R_BRACE, 0)

        def methodElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(ProtobufParser.MethodElementContext)
            else:
                return self.getTypedRuleContext(ProtobufParser.MethodElementContext,i)


        def getRuleIndex(self):
            return ProtobufParser.RULE_methodDecl

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodDecl" ):
                listener.enterMethodDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodDecl" ):
                listener.exitMethodDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodDecl" ):
                return visitor.visitMethodDecl(self)
            else:
                return visitor.visitChildren(self)




    def methodDecl(self):

        localctx = ProtobufParser.MethodDeclContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_methodDecl)
        self._la = 0 # Token type
        try:
            self.state = 825
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 802
                self.match(ProtobufParser.RPC)
                self.state = 803
                self.methodName()
                self.state = 804
                self.inputType()
                self.state = 805
                self.match(ProtobufParser.RETURNS)
                self.state = 806
                self.outputType()
                self.state = 807
                self.match(ProtobufParser.SEMICOLON)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 809
                self.match(ProtobufParser.RPC)
                self.state = 810
                self.methodName()
                self.state = 811
                self.inputType()
                self.state = 812
                self.match(ProtobufParser.RETURNS)
                self.state = 813
                self.outputType()
                self.state = 814
                self.match(ProtobufParser.L_BRACE)
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2251799813686284) != 0):
                    self.state = 815
                    self.methodElement()
                    self.state = 820
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 821
                self.match(ProtobufParser.R_BRACE)
                self.state = 823
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                if la_ == 1:
                    self.state = 822
                    self.match(ProtobufParser.SEMICOLON)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(ProtobufParser.IdentifierContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_methodName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodName" ):
                listener.enterMethodName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodName" ):
                listener.exitMethodName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodName" ):
                return visitor.visitMethodName(self)
            else:
                return visitor.visitChildren(self)




    def methodName(self):

        localctx = ProtobufParser.MethodNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_methodName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 827
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InputTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageType(self):
            return self.getTypedRuleContext(ProtobufParser.MessageTypeContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_inputType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInputType" ):
                listener.enterInputType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInputType" ):
                listener.exitInputType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInputType" ):
                return visitor.visitInputType(self)
            else:
                return visitor.visitChildren(self)




    def inputType(self):

        localctx = ProtobufParser.InputTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_inputType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.messageType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OutputTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def messageType(self):
            return self.getTypedRuleContext(ProtobufParser.MessageTypeContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_outputType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOutputType" ):
                listener.enterOutputType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOutputType" ):
                listener.exitOutputType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOutputType" ):
                return visitor.visitOutputType(self)
            else:
                return visitor.visitChildren(self)




    def outputType(self):

        localctx = ProtobufParser.OutputTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_outputType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.messageType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def optionDecl(self):
            return self.getTypedRuleContext(ProtobufParser.OptionDeclContext,0)


        def commentDecl(self):
            return self.getTypedRuleContext(ProtobufParser.CommentDeclContext,0)


        def emptyDecl(self):
            return self.getTypedRuleContext(ProtobufParser.EmptyDeclContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_methodElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodElement" ):
                listener.enterMethodElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodElement" ):
                listener.exitMethodElement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodElement" ):
                return visitor.visitMethodElement(self)
            else:
                return visitor.visitChildren(self)




    def methodElement(self):

        localctx = ProtobufParser.MethodElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_methodElement)
        try:
            self.state = 836
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 833
                self.optionDecl()
                pass
            elif token in [2, 3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 834
                self.commentDecl()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 835
                self.emptyDecl()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MessageTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_PAREN(self):
            return self.getToken(ProtobufParser.L_PAREN, 0)

        def methodDeclTypeName(self):
            return self.getTypedRuleContext(ProtobufParser.MethodDeclTypeNameContext,0)


        def R_PAREN(self):
            return self.getToken(ProtobufParser.R_PAREN, 0)

        def STREAM(self):
            return self.getToken(ProtobufParser.STREAM, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_messageType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMessageType" ):
                listener.enterMessageType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMessageType" ):
                listener.exitMessageType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMessageType" ):
                return visitor.visitMessageType(self)
            else:
                return visitor.visitChildren(self)




    def messageType(self):

        localctx = ProtobufParser.MessageTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_messageType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(ProtobufParser.L_PAREN)
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43:
                self.state = 839
                self.match(ProtobufParser.STREAM)


            self.state = 842
            self.methodDeclTypeName()
            self.state = 843
            self.match(ProtobufParser.R_PAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alwaysIdent(self):
            return self.getTypedRuleContext(ProtobufParser.AlwaysIdentContext,0)


        def sometimesIdent(self):
            return self.getTypedRuleContext(ProtobufParser.SometimesIdentContext,0)


        def getRuleIndex(self):
            return ProtobufParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = ProtobufParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_identifier)
        try:
            self.state = 847
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 35, 36, 41, 42, 44, 45]:
                self.enterOuterAlt(localctx, 1)
                self.state = 845
                self.alwaysIdent()
                pass
            elif token in [10, 13, 14, 15, 31, 32, 34, 37, 38, 39, 40, 43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.sometimesIdent()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlwaysIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(ProtobufParser.IDENTIFIER, 0)

        def SYNTAX(self):
            return self.getToken(ProtobufParser.SYNTAX, 0)

        def IMPORT(self):
            return self.getToken(ProtobufParser.IMPORT, 0)

        def WEAK(self):
            return self.getToken(ProtobufParser.WEAK, 0)

        def PUBLIC(self):
            return self.getToken(ProtobufParser.PUBLIC, 0)

        def PACKAGE(self):
            return self.getToken(ProtobufParser.PACKAGE, 0)

        def INF(self):
            return self.getToken(ProtobufParser.INF, 0)

        def NAN(self):
            return self.getToken(ProtobufParser.NAN, 0)

        def BOOL(self):
            return self.getToken(ProtobufParser.BOOL, 0)

        def STRING(self):
            return self.getToken(ProtobufParser.STRING, 0)

        def BYTES(self):
            return self.getToken(ProtobufParser.BYTES, 0)

        def FLOAT(self):
            return self.getToken(ProtobufParser.FLOAT, 0)

        def DOUBLE(self):
            return self.getToken(ProtobufParser.DOUBLE, 0)

        def INT32(self):
            return self.getToken(ProtobufParser.INT32, 0)

        def INT64(self):
            return self.getToken(ProtobufParser.INT64, 0)

        def UINT32(self):
            return self.getToken(ProtobufParser.UINT32, 0)

        def UINT64(self):
            return self.getToken(ProtobufParser.UINT64, 0)

        def SINT32(self):
            return self.getToken(ProtobufParser.SINT32, 0)

        def SINT64(self):
            return self.getToken(ProtobufParser.SINT64, 0)

        def FIXED32(self):
            return self.getToken(ProtobufParser.FIXED32, 0)

        def FIXED64(self):
            return self.getToken(ProtobufParser.FIXED64, 0)

        def SFIXED32(self):
            return self.getToken(ProtobufParser.SFIXED32, 0)

        def SFIXED64(self):
            return self.getToken(ProtobufParser.SFIXED64, 0)

        def MAP(self):
            return self.getToken(ProtobufParser.MAP, 0)

        def TO(self):
            return self.getToken(ProtobufParser.TO, 0)

        def MAX(self):
            return self.getToken(ProtobufParser.MAX, 0)

        def SERVICE(self):
            return self.getToken(ProtobufParser.SERVICE, 0)

        def RPC(self):
            return self.getToken(ProtobufParser.RPC, 0)

        def RETURNS(self):
            return self.getToken(ProtobufParser.RETURNS, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_alwaysIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlwaysIdent" ):
                listener.enterAlwaysIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlwaysIdent" ):
                listener.exitAlwaysIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlwaysIdent" ):
                return visitor.visitAlwaysIdent(self)
            else:
                return visitor.visitChildren(self)




    def alwaysIdent(self):

        localctx = ProtobufParser.AlwaysIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_alwaysIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 849
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 59487444474848) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SometimesIdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MESSAGE(self):
            return self.getToken(ProtobufParser.MESSAGE, 0)

        def ENUM(self):
            return self.getToken(ProtobufParser.ENUM, 0)

        def ONEOF(self):
            return self.getToken(ProtobufParser.ONEOF, 0)

        def RESERVED(self):
            return self.getToken(ProtobufParser.RESERVED, 0)

        def EXTENSIONS(self):
            return self.getToken(ProtobufParser.EXTENSIONS, 0)

        def EXTEND(self):
            return self.getToken(ProtobufParser.EXTEND, 0)

        def OPTION(self):
            return self.getToken(ProtobufParser.OPTION, 0)

        def OPTIONAL(self):
            return self.getToken(ProtobufParser.OPTIONAL, 0)

        def REQUIRED(self):
            return self.getToken(ProtobufParser.REQUIRED, 0)

        def REPEATED(self):
            return self.getToken(ProtobufParser.REPEATED, 0)

        def GROUP(self):
            return self.getToken(ProtobufParser.GROUP, 0)

        def STREAM(self):
            return self.getToken(ProtobufParser.STREAM, 0)

        def getRuleIndex(self):
            return ProtobufParser.RULE_sometimesIdent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSometimesIdent" ):
                listener.enterSometimesIdent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSometimesIdent" ):
                listener.exitSometimesIdent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSometimesIdent" ):
                return visitor.visitSometimesIdent(self)
            else:
                return visitor.visitChildren(self)




    def sometimesIdent(self):

        localctx = ProtobufParser.SometimesIdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_sometimesIdent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 10881299702784) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





